Timer unit: 1e-07 s

Total time: 0.195201 s
File: C:\Users\Toby Usher\Documents\dev\quivo-app\backend\api\views.py
Function: post at line 323

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   323                                           	@profile
   324                                           	def post(self, request, *args, **kwargs):
   325                                           
   326         4        503.0    125.8      0.0  		language_code = self.request.session.get('current_language_code')
   327                                           		
   328         4         36.0      9.0      0.0  		user_id = self.kwargs.get('user_id')
   329         4         32.0      8.0      0.0  		word = self.kwargs.get('word')
   330                                           
   331                                           		#serializer = UserToggleKnownWordSerializer(data=request.data)
   332         4       2321.0    580.2      0.1  		serializer = UserToggleKnownWordSerializer(data={'user_id': user_id, 'word': word})
   333                                           
   334         4      17438.0   4359.5      0.9  		if serializer.is_valid():
   335                                           
   336         4        147.0     36.8      0.0  			user_id = serializer.validated_data['user_id']
   337         4         89.0     22.2      0.0  			word = serializer.validated_data['word']
   338                                           
   339         8         75.0      9.4      0.0  			word_data_model = {
   340         4         34.0      8.5      0.0  				'fr': FrWordData,
   341         4         19.0      4.8      0.0  				'de': DeWordData,
   342         4         19.0      4.8      0.0  				'ru': RuWordData,
   343         4         16.0      4.0      0.0  				'th': ThWordData
   344         4         45.0     11.2      0.0  			}.get(language_code, 'fr') # Default to fr for now
   345                                           
   346         4      98963.0  24740.8      5.1  			user = AppUser.objects.get(user_id=user_id)
   347         4     334796.0  83699.0     17.2  			word_obj = word_data_model.objects.get(word=word)
   348                                           
   349                                           			# Get the UserWord object for this user and word
   350        12     821837.0  68486.4     42.1  			user_word_obj, created = UserWord.objects.get_or_create(
   351         4         18.0      4.5      0.0  				user=user,
   352         4         66.0     16.5      0.0  				**{f'word_{language_code}': word_obj}
   353                                           			)
   354                                           
   355                                           			# Check if a user knows a word
   356         4         55.0     13.8      0.0  			if created:
   357         4         53.0     13.2      0.0  				word_added = True
   358                                           				#user.known_words.add(user_word_obj)
   359                                           			else:
   360                                           				word_added = False
   361                                           				user.known_words.remove(user_word_obj)
   362                                           
   363         7     306706.0  43815.1     15.7  			with open('output.txt', 'w') as stream:
   364         3     363838.0 121279.3     18.6  				profile.print_stats(stream=stream)  
   365                                           
   366         6       4866.0    811.0      0.2  			return Response({
   367         3         24.0      8.0      0.0  				"status": "success",
   368         3         13.0      4.3      0.0  				"word_added": word_added
   369                                           				})
   370                                           
   371                                           		else:
   372                                           
   373                                           			return Response(serializer.errors, status=400)

