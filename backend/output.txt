Timer unit: 1e-07 s

Total time: 0.170951 s
File: C:\Users\Toby Usher\Documents\dev\quivo-app\backend\api\views.py
Function: post at line 322

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   322                                           	@profile
   323                                           	def post(self, request, *args, **kwargs):
   324                                           
   325         4        439.0    109.8      0.0  		language_code = self.request.session.get('current_language_code')
   326                                           		
   327         4         36.0      9.0      0.0  		user_id = self.kwargs.get('user_id')
   328         4         28.0      7.0      0.0  		word = self.kwargs.get('word')
   329                                           
   330                                           		#serializer = UserToggleKnownWordSerializer(data=request.data)
   331         4       2122.0    530.5      0.1  		serializer = UserToggleKnownWordSerializer(data={'user_id': user_id, 'word': word})
   332                                           
   333         4      14579.0   3644.8      0.9  		if serializer.is_valid():
   334                                           
   335         4        116.0     29.0      0.0  			user_id = serializer.validated_data['user_id']
   336         4         68.0     17.0      0.0  			word = serializer.validated_data['word']
   337                                           
   338         8         53.0      6.6      0.0  			word_data_model = {
   339         4         31.0      7.8      0.0  				'fr': FrWordData,
   340         4         22.0      5.5      0.0  				'de': DeWordData,
   341         4         18.0      4.5      0.0  				'ru': RuWordData,
   342         4         16.0      4.0      0.0  				'th': ThWordData
   343         4         38.0      9.5      0.0  			}.get(language_code, 'fr') # Default to fr for now
   344                                           
   345         4      89079.0  22269.8      5.2  			user = AppUser.objects.get(user_id=user_id)
   346         4     411310.0 102827.5     24.1  			word_obj = word_data_model.objects.get(word=word)
   347                                           
   348                                           			# Get the UserWord object for this user and word
   349        12     682781.0  56898.4     39.9  			user_word_obj, created = UserWord.objects.get_or_create(
   350         4         18.0      4.5      0.0  				user=user,
   351         4         46.0     11.5      0.0  				**{f'word_{language_code}': word_obj}
   352                                           			)
   353                                           
   354                                           			# Check if a user knows a word
   355         4         39.0      9.8      0.0  			if created:
   356         4         27.0      6.8      0.0  				word_added = True
   357                                           				#user.known_words.add(user_word_obj)
   358                                           			else:
   359                                           				word_added = False
   360                                           				user.known_words.remove(user_word_obj)
   361                                           
   362         7     305691.0  43670.1     17.9  			with open('output.txt', 'w') as stream:
   363         3     198364.0  66121.3     11.6  				profile.print_stats(stream=stream)  
   364                                           
   365         6       4547.0    757.8      0.3  			return Response({
   366         3         28.0      9.3      0.0  				"status": "success",
   367         3         14.0      4.7      0.0  				"word_added": word_added
   368                                           				})
   369                                           
   370                                           		else:
   371                                           
   372                                           			return Response(serializer.errors, status=400)

