{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Toby Usher\\\\Documents\\\\dev\\\\quivo-app\\\\frontend\\\\components\\\\SentenceReaderPanel\\\\hooks\\\\useSentenceComponents.tsx\";\nimport { useEffect, useState, useContext } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport UserContext from \"../../../contexts/UserContext\";\nimport { speak } from '../../../utils/text';\nimport { capitalizeFirstLetter } from \"../../../utils/text\";\nimport * as constants from '../../../constants';\nimport Word from \"../components/Word\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function useSentenceComponents(navigation, primaryColor, currentItem, wordsData, autoDictEnabled) {\n  var _this = this;\n  var _useContext = useContext(UserContext),\n    currentLanguageCode = _useContext.currentLanguageCode;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    sentenceComponents = _useState2[0],\n    setSentenceComponents = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    activeWords = _useState4[0],\n    setActiveWords = _useState4[1];\n  var screenWidth = useWindowDimensions().width;\n  useEffect(function () {\n    if (currentItem && wordsData) {\n      setActiveWords(Object.keys(Object.fromEntries(Object.entries(wordsData).filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        return value.user_knows;\n      }))));\n      if (autoDictEnabled) speak(currentItem.sentence, currentLanguageCode);\n    }\n  }, [wordsData]);\n  useEffect(function () {\n    console.log('Sentence re-render triggered');\n    createSentenceComponents(currentItem, wordsData).then(function (components) {\n      setSentenceComponents(components);\n    });\n  }, [activeWords]);\n  var getFullWord = function getFullWord(word) {\n    var shortened_word_map = {\n      'j': 'je',\n      'l': 'le',\n      't': 'tu',\n      'd': 'de',\n      'c': 'ce',\n      's': 'se',\n      'qu': 'que',\n      'm': 'me',\n      'n': 'ne'\n    };\n    return word in shortened_word_map ? shortened_word_map[word] : word;\n  };\n  var handleWordPress = function handleWordPress(word) {\n    var fullWord = getFullWord(word.toLowerCase());\n    if (activeWords.includes(fullWord)) {\n      setActiveWords(function (prevArr) {\n        return prevArr.filter(function (item) {\n          return item !== fullWord;\n        });\n      });\n    } else {\n      setActiveWords(function (prevArr) {\n        return [].concat(_toConsumableArray(prevArr), [fullWord]);\n      });\n    }\n  };\n  var createSentenceComponents = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (currentItem.sentence.length == 0) {\n        return _jsxDEV(Text, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 20\n        }, _this);\n      }\n      var regex = {\n        'fr': /(?:[Aa]ujourd\\'hui|[Pp]resqu\\'île|[Qq]uelqu\\'un|[Dd]\\'accord|-t-|[a-zA-Z0-9éèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+|[^a-zA-Z0-9éèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+)/g,\n        'de': /(?:[a-zA-ZäöüÄÖÜß]+|[^a-zA-ZäöüÄÖÜß])/g,\n        'ru': /(?:[А-Яа-яЁё]+|[^А-Яа-яЁё])/g\n      };\n      var splitSentence = currentItem.sentence.match(regex[currentLanguageCode]) || [];\n      var sentenceComponents = [];\n      for (var i = 0; i < splitSentence.length; i++) {\n        var word = splitSentence[i];\n        var fullWord = getFullWord(word.toLowerCase());\n        if (wordsData.hasOwnProperty(fullWord)) {\n          sentenceComponents.push(_jsxDEV(Word, {\n            navigation: navigation,\n            word: word,\n            wordData: wordsData[fullWord],\n            textColor: activeWords.includes(fullWord) ? constants.BLACK : constants.BLACK + '55',\n            textBackgroundColor: activeWords.includes(fullWord) ? primaryColor + '55' : constants.TERTIARYCOLOR,\n            onPress: handleWordPress,\n            isFirstWord: i == 0,\n            screenWidth: screenWidth,\n            index: i\n          }, `${currentItem.id}-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 41\n          }, _this));\n        } else {\n          sentenceComponents.push(_jsxDEV(Text, {\n            style: {\n              color: constants.BLACK + '55',\n              fontSize: constants.H1FONTSIZE + 7,\n              fontFamily: constants.FONTFAMILYBOLD,\n              textAlign: \"center\"\n            },\n            children: i == 0 ? capitalizeFirstLetter(word) : word\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 41\n          }, _this));\n        }\n      }\n      ;\n      return sentenceComponents;\n    });\n    return function createSentenceComponents() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return {\n    sentenceComponents: sentenceComponents,\n    setActiveWords: setActiveWords\n  };\n}","map":{"version":3,"names":["useEffect","useState","useContext","Text","useWindowDimensions","UserContext","speak","capitalizeFirstLetter","constants","Word","jsxDEV","_jsxDEV","useSentenceComponents","navigation","primaryColor","currentItem","wordsData","autoDictEnabled","_this","_useContext","currentLanguageCode","_useState","_useState2","_slicedToArray","sentenceComponents","setSentenceComponents","_useState3","_useState4","activeWords","setActiveWords","screenWidth","width","Object","keys","fromEntries","entries","filter","_ref","_ref2","key","value","user_knows","sentence","console","log","createSentenceComponents","then","components","getFullWord","word","shortened_word_map","handleWordPress","fullWord","toLowerCase","includes","prevArr","item","concat","_toConsumableArray","_ref3","_asyncToGenerator","length","fileName","_jsxFileName","lineNumber","columnNumber","regex","splitSentence","match","i","hasOwnProperty","push","wordData","textColor","BLACK","textBackgroundColor","TERTIARYCOLOR","onPress","isFirstWord","index","id","style","color","fontSize","H1FONTSIZE","fontFamily","FONTFAMILYBOLD","textAlign","children","apply","arguments"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/components/SentenceReaderPanel/hooks/useSentenceComponents.tsx"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\r\nimport { Text, useWindowDimensions } from \"react-native\";\r\n// Contexts\r\nimport UserContext from \"../../../contexts/UserContext\";\r\n// Utils\r\nimport { speak } from '../../../utils/text';\r\nimport { capitalizeFirstLetter } from \"../../../utils/text\";\r\n// Constants\r\nimport * as constants from '../../../constants'\r\n// Components\r\nimport Word from \"../components/Word\";\r\n\r\nexport default function useSentenceComponents(navigation, primaryColor, currentItem, wordsData, autoDictEnabled){\r\n    // NOTE: This hook should not contain tsx\r\n\r\n    const { currentLanguageCode } = useContext(UserContext);\r\n    const [sentenceComponents, setSentenceComponents] = useState<React.JSX.Element[]>([]);\r\n    const [activeWords, setActiveWords] = useState([]);\r\n    const screenWidth = useWindowDimensions().width;\r\n    \r\n    useEffect(() => {\r\n        // update activeWords to include all words in wordsData\r\n        \r\n        // This useEffect relies on wordsData consistently updating slower than\r\n        // currentItem, but it probably needs a rethink\r\n        if (currentItem && wordsData) {\r\n\r\n            // Initialises activeWords with the wordsData keys where\r\n            // the user already knows the word.\r\n            setActiveWords(Object.keys(Object.fromEntries(\r\n                Object.entries(wordsData).filter(\r\n                    ([key, value]) => value.user_knows\r\n                )\r\n            )));\r\n\r\n            // This starts speaking before sentence components have been created\r\n            // which might seem odd if sentence takes a while to render\r\n            if (autoDictEnabled) speak(currentItem.sentence, currentLanguageCode);\r\n        }\r\n    }, [wordsData]);\r\n\r\n    useEffect(() => {\r\n        console.log('Sentence re-render triggered');\r\n        createSentenceComponents(currentItem, wordsData).then(components => {\r\n            setSentenceComponents(components);\r\n        });\r\n    }, [activeWords])\r\n\r\n    const getFullWord = (word: string) => {\r\n        \r\n        // TODO: This map gets repeated three times. Need to sort this out\r\n        let shortened_word_map: Record<string, string> = {\r\n            'j': 'je',\r\n            'l': 'le', // Always replace with le for now. Figure out a better solution here\r\n            't': 'tu', // This will assign the t in a-t-on to tu for example, which will give tu a higher frequency than it should have, but it's only one very common word so I'm not going to address it\r\n            'd': 'de', // Need to check whether this is ever du\r\n            'c': 'ce',\r\n            's': 'se',\r\n            'qu': 'que',\r\n            'm': 'me',\r\n            'n': 'ne',\r\n        }\r\n\r\n        return word in shortened_word_map ? shortened_word_map[word] : word;\r\n    }\r\n\r\n    const handleWordPress = (word: string) => {\r\n        let fullWord = getFullWord(word.toLowerCase());\r\n        if (activeWords.includes(fullWord)) {\r\n            setActiveWords((prevArr) => prevArr.filter((item) => item !== fullWord));\r\n        } else {\r\n            setActiveWords((prevArr) => [...prevArr, fullWord]);\r\n        }\r\n    };\r\n\r\n    const createSentenceComponents = async() => {\r\n        //setActiveWords([]);\r\n        \r\n        if (currentItem.sentence.length == 0) {\r\n            return <Text></Text>;\r\n        }\r\n\r\n        // Want to match into one of two categories: valid french words (using same regex as one shown above) and everything else\r\n        const regex: Record<string, RegExp> = {\r\n            'fr': /(?:[Aa]ujourd\\'hui|[Pp]resqu\\'île|[Qq]uelqu\\'un|[Dd]\\'accord|-t-|[a-zA-Z0-9éèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+|[^a-zA-Z0-9éèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+)/g,\r\n            'de': /(?:[a-zA-ZäöüÄÖÜß]+|[^a-zA-ZäöüÄÖÜß])/g,\r\n            'ru': /(?:[А-Яа-яЁё]+|[^А-Яа-яЁё])/g,\r\n        }\r\n        \r\n        const splitSentence = currentItem.sentence.match(regex[currentLanguageCode]) || [];\r\n        const sentenceComponents = [];\r\n\r\n        for (let i = 0; i < splitSentence.length; i++) {\r\n            \r\n            let word = splitSentence[i]\r\n            // Same as word unless in shortened_word_map\r\n            let fullWord = getFullWord(word.toLowerCase());\r\n    \r\n            if (wordsData.hasOwnProperty(fullWord)) {\r\n\r\n                sentenceComponents.push(<Word\r\n                    navigation={navigation}\r\n                    word={word}\r\n                    wordData={wordsData[fullWord]}\r\n                    textColor={activeWords.includes(fullWord) ? constants.BLACK : constants.BLACK + '55'}\r\n                    textBackgroundColor={activeWords.includes(fullWord) ? primaryColor + '55': constants.TERTIARYCOLOR}\r\n                    onPress={handleWordPress}\r\n                    isFirstWord={i==0}\r\n                    screenWidth={screenWidth}\r\n                    index={i}\r\n                    key={`${currentItem.id}-${i}`}\r\n                />);\r\n                //Add words already known to activeWords arrays\r\n                //setActiveWords((prevArr) => [...prevArr, fullWord])\r\n            } else {\r\n                sentenceComponents.push(<Text style={{\r\n                    color: constants.BLACK + '55',\r\n                    fontSize: constants.H1FONTSIZE + 7,\r\n                    fontFamily: constants.FONTFAMILYBOLD,\r\n                    textAlign: \"center\" \r\n                }} key={i}>{i==0 ? capitalizeFirstLetter(word) : word}</Text>);\r\n            }\r\n        };\r\n        return sentenceComponents;\r\n    };\r\n\r\n    return { sentenceComponents, setActiveWords };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}