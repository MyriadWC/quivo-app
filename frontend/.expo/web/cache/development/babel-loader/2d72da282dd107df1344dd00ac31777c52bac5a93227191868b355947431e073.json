{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { useEffect, useState, useContext } from \"react\";\nimport UserContext from \"../contexts/UserContext\";\nimport * as constants from \"../constants\";\nimport client from \"../utils/axios\";\nimport { capitalizeFirstLetter } from \"../utils/text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ProgressBarButton = function ProgressBarButton(_ref) {\n  var label = _ref.label,\n    currentValue = _ref.currentValue,\n    maxValue = _ref.maxValue,\n    defaultActive = _ref.defaultActive;\n  var _useState = useState(defaultActive ? constants.BLACK : constants.SECONDARYCOLOR),\n    _useState2 = _slicedToArray(_useState, 2),\n    borderColor = _useState2[0],\n    setBorderColor = _useState2[1];\n  var progressPercentage = Math.floor(currentValue / maxValue * 100);\n  var handlePress = function handlePress() {\n    setBorderColor(borderColor == constants.SECONDARYCOLOR ? constants.BLACK : constants.SECONDARYCOLOR);\n  };\n  return _jsxs(TouchableOpacity, {\n    activeOpacity: 1,\n    style: _objectSpread(_objectSpread({}, styles.progressBarButton), {}, {\n      borderColor: borderColor\n    }),\n    onPress: handlePress,\n    children: [_jsx(View, {\n      style: _objectSpread({\n        width: progressPercentage + '%'\n      }, styles.progressBar)\n    }), _jsx(View, {\n      style: styles.progressBarButtonTextContainer,\n      children: _jsx(Text, {\n        style: styles.progressBarButtonText,\n        children: label\n      })\n    }), _jsx(View, {\n      style: styles.progressBarButtonNumberContainer,\n      children: _jsx(Text, {\n        style: styles.progressBarButtonNumberText,\n        children: currentValue\n      })\n    })]\n  });\n};\nvar WordItem = function WordItem(_ref2) {\n  var item = _ref2.item;\n  var selectedStyling = {\n    'backgroundColor': constants.PRIMARYCOLOR,\n    'color': constants.TERTIARYCOLOR,\n    'numberBox': {\n      'backgroundColor': constants.TERTIARYCOLOR,\n      'color': constants.BLACK\n    }\n  };\n  var unselectedStyling = {\n    'backgroundColor': constants.SECONDARYCOLOR,\n    'color': constants.BLACK,\n    'numberBox': {\n      'backgroundColor': constants.PRIMARYCOLOR,\n      'color': constants.TERTIARYCOLOR\n    }\n  };\n  var _useState3 = useState(item.user_knows ? selectedStyling : unselectedStyling),\n    _useState4 = _slicedToArray(_useState3, 2),\n    styling = _useState4[0],\n    setStyling = _useState4[1];\n  return _jsxs(View, {\n    style: _objectSpread({\n      backgroundColor: styling.backgroundColor\n    }, styles.wordItem),\n    children: [_jsx(View, {\n      style: _objectSpread({\n        backgroundColor: styling.numberBox.backgroundColor\n      }, styles.numberContainer),\n      children: _jsx(Text, {\n        style: _objectSpread({\n          color: styling.numberBox.color\n        }, styles.numberText),\n        children: item.id\n      })\n    }), _jsx(View, {\n      style: styles.word,\n      children: _jsx(Text, {\n        style: _objectSpread({\n          color: styling.color\n        }, styles.wordText),\n        children: capitalizeFirstLetter(item.word)\n      })\n    })]\n  });\n};\nexport default function WordListScreen(_ref3) {\n  var navigation = _ref3.navigation;\n  var _useContext = useContext(UserContext),\n    currentUser = _useContext.currentUser;\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    words = _useState6[0],\n    setWords = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    wordCounts = _useState8[0],\n    setWordCounts = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    showLoadMore = _useState10[0],\n    setShowLoadMore = _useState10[1];\n  useEffect(function () {\n    fetchWordCounts();\n    fetchWordsData();\n  }, []);\n  var fetchWordCounts = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      try {\n        var res = yield client.get('./api/users/' + currentUser.user_id + '/wordcounts', {\n          withCredentials: true\n        });\n        setWordCounts(res.data);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    return function fetchWordCounts() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var fetchWordsData = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      try {\n        var res = yield client.post('./api/words', {\n          start_index: 0,\n          end_index: 100,\n          withCredentials: true\n        });\n        var valuesArray = Object.values(res.data);\n        setWords(valuesArray);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    return function fetchWordsData() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxs(ScrollView, {\n      style: styles.topButtonContainer,\n      horizontal: true,\n      bounces: false,\n      showsVerticalScrollIndicator: false,\n      showsHorizontalScrollIndicator: false,\n      overScrollMode: \"never\",\n      children: [_jsx(ProgressBarButton, {\n        label: '0-1k',\n        currentValue: wordCounts['1-1000'],\n        maxValue: 1000,\n        defaultActive: true\n      }), _jsx(ProgressBarButton, {\n        label: '1k-2k',\n        currentValue: wordCounts['1001-2000'],\n        maxValue: 1000,\n        defaultActive: false\n      }), _jsx(ProgressBarButton, {\n        label: '2k-3k',\n        currentValue: wordCounts['2001-3000'],\n        maxValue: 1000,\n        defaultActive: false\n      }), _jsx(ProgressBarButton, {\n        label: '3k-4k',\n        currentValue: wordCounts['3001-4000'],\n        maxValue: 1000,\n        defaultActive: false\n      }), _jsx(ProgressBarButton, {\n        label: '4k-5k',\n        currentValue: wordCounts['4001-5000'],\n        maxValue: 1000,\n        defaultActive: false\n      }), _jsx(ProgressBarButton, {\n        label: '5k+',\n        currentValue: wordCounts['5000+'],\n        maxValue: 1000,\n        defaultActive: false\n      })]\n    }), _jsx(View, {\n      style: styles.headerContainer,\n      children: _jsx(Text, {\n        style: styles.headerContainerText,\n        children: \"1000 Most Common\"\n      })\n    }), _jsx(FlatList, {\n      style: styles.wordList,\n      data: words,\n      bounces: false,\n      showsVerticalScrollIndicator: false,\n      showsHorizontalScrollIndicator: false,\n      overScrollMode: \"never\",\n      onEndReached: function onEndReached() {\n        return setShowLoadMore(true);\n      },\n      onEndReachedThreshold: 0.1,\n      renderItem: function renderItem(_ref6) {\n        var item = _ref6.item;\n        return _jsx(WordItem, {\n          item: item\n        });\n      }\n    }), showLoadMore && _jsx(TouchableOpacity, {\n      activeOpacity: 1,\n      style: styles.loadMoreButton,\n      onPress: function onPress() {\n        setShowLoadMore(false);\n      },\n      children: _jsx(Text, {\n        style: styles.loadMoreButtonText,\n        children: \"Load more\"\n      })\n    })]\n  });\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 10\n  },\n  topButtonContainer: {\n    flexDirection: 'row',\n    padding: 5,\n    marginBottom: 10\n  },\n  headerContainer: {\n    marginHorizontal: 10\n  },\n  headerContainerText: {\n    fontSize: constants.H2FONTSIZE,\n    fontFamily: constants.FONTFAMILYBOLD,\n    color: constants.BLACK\n  },\n  wordList: {\n    height: \"100%\",\n    marginTop: 10,\n    marginHorizontal: 10\n  },\n  loadMoreButton: {\n    backgroundColor: constants.PRIMARYCOLOR,\n    borderRadius: 10,\n    width: 150,\n    padding: 5,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    marginTop: 10\n  },\n  loadMoreButtonText: {\n    fontSize: constants.H2FONTSIZE,\n    fontFamily: constants.FONTFAMILYBOLD,\n    color: constants.TERTIARYCOLOR,\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  },\n  wordItem: {\n    flexDirection: \"row\",\n    borderRadius: 10,\n    marginBottom: 5,\n    padding: 10\n  },\n  numberContainer: {\n    borderRadius: 5,\n    padding: 5,\n    marginRight: 10\n  },\n  numberText: {\n    fontFamily: constants.FONTFAMILYBOLD,\n    fontSize: constants.H3FONTSIZE\n  },\n  word: {\n    marginTop: 'auto',\n    marginBottom: 'auto'\n  },\n  wordText: {\n    fontFamily: constants.FONTFAMILYBOLD,\n    fontSize: constants.H2FONTSIZE\n  },\n  progressBarButton: {\n    backgroundColor: constants.SECONDARYCOLOR,\n    flexDirection: \"row\",\n    borderWidth: 3,\n    borderRadius: 10,\n    overflow: 'hidden',\n    verticalAlign: 'center',\n    marginHorizontal: 5,\n    paddingHorizontal: 5,\n    marginBottom: 15,\n    height: 40\n  },\n  progressBarButtonTextContainer: {\n    marginTop: 'auto',\n    marginBottom: 'auto',\n    marginRight: 10\n  },\n  progressBarButtonText: {\n    fontSize: constants.H2FONTSIZE,\n    fontFamily: constants.FONTFAMILYBOLD\n  },\n  progressBarButtonNumberContainer: {\n    backgroundColor: constants.PRIMARYCOLOR,\n    paddingHorizontal: 5,\n    borderRadius: 5,\n    marginTop: 'auto',\n    marginBottom: 'auto'\n  },\n  progressBarButtonNumberText: {\n    fontSize: constants.H2FONTSIZE,\n    fontFamily: constants.FONTFAMILYBOLD,\n    color: constants.TERTIARYCOLOR\n  },\n  progressBar: {\n    position: 'absolute',\n    height: 40,\n    backgroundColor: constants.PRIMARYCOLOR,\n    borderColor: constants.PRIMARYCOLOR\n  }\n});","map":{"version":3,"names":["useEffect","useState","useContext","UserContext","constants","client","capitalizeFirstLetter","jsx","_jsx","jsxs","_jsxs","ProgressBarButton","_ref","label","currentValue","maxValue","defaultActive","_useState","BLACK","SECONDARYCOLOR","_useState2","_slicedToArray","borderColor","setBorderColor","progressPercentage","Math","floor","handlePress","TouchableOpacity","activeOpacity","style","_objectSpread","styles","progressBarButton","onPress","children","View","width","progressBar","progressBarButtonTextContainer","Text","progressBarButtonText","progressBarButtonNumberContainer","progressBarButtonNumberText","WordItem","_ref2","item","selectedStyling","PRIMARYCOLOR","TERTIARYCOLOR","unselectedStyling","_useState3","user_knows","_useState4","styling","setStyling","backgroundColor","wordItem","numberBox","numberContainer","color","numberText","id","word","wordText","WordListScreen","_ref3","navigation","_useContext","currentUser","_useState5","_useState6","words","setWords","_useState7","_useState8","wordCounts","setWordCounts","_useState9","_useState10","showLoadMore","setShowLoadMore","fetchWordCounts","fetchWordsData","_ref4","_asyncToGenerator","res","get","user_id","withCredentials","data","error","console","apply","arguments","_ref5","post","start_index","end_index","valuesArray","Object","values","SafeAreaView","container","ScrollView","topButtonContainer","horizontal","bounces","showsVerticalScrollIndicator","showsHorizontalScrollIndicator","overScrollMode","headerContainer","headerContainerText","FlatList","wordList","onEndReached","onEndReachedThreshold","renderItem","_ref6","loadMoreButton","loadMoreButtonText","StyleSheet","create","flex","marginHorizontal","flexDirection","padding","marginBottom","fontSize","H2FONTSIZE","fontFamily","FONTFAMILYBOLD","height","marginTop","borderRadius","marginLeft","marginRight","H3FONTSIZE","borderWidth","overflow","verticalAlign","paddingHorizontal","position"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/screens/WordListScreen.tsx"],"sourcesContent":["import { View, ScrollView, Text, TouchableOpacity, StyleSheet, SafeAreaView, FlatList, StatusBar } from \"react-native\"\r\nimport { useEffect, useState, useContext } from \"react\"\r\nimport { NativeStackHeaderProps } from \"@react-navigation/native-stack\"\r\nimport { FontAwesome } from \"@expo/vector-icons\"\r\nimport UserContext from '../contexts/UserContext';\r\nimport * as constants from \"../constants\";\r\nimport client from \"../utils/axios\";\r\nimport { capitalizeFirstLetter } from \"../utils/text\";\r\n\r\n/*\r\n\r\nHow to fix the issue of only hilighting one button at a time:\r\nIf each highlighted button is its own component, you can still manage the highlighted state at a higher level component and pass it down as props to the button components. Here’s an example:\r\n\r\nimport React, { useState } from 'react';\r\nimport { View } from 'react-native';\r\nimport HighlightedButton from './HighlightedButton'; // import your button component\r\n\r\nconst MyComponent = () => {\r\n  const [highlightedButton, setHighlightedButton] = useState(null);\r\n\r\n  const handlePress = (buttonId) => {\r\n    setHighlightedButton(buttonId);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <HighlightedButton \r\n        id='button1' \r\n        isHighlighted={highlightedButton === 'button1'} \r\n        onPress={handlePress} \r\n      />\r\n      <HighlightedButton \r\n        id='button2' \r\n        isHighlighted={highlightedButton === 'button2'} \r\n        onPress={handlePress} \r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default MyComponent;\r\n\r\nAnd here’s how you might define the HighlightedButton component:\r\n\r\nimport React from 'react';\r\nimport { TouchableOpacity, Text, StyleSheet } from 'react-native';\r\n\r\nconst HighlightedButton = ({ id, isHighlighted, onPress }) => {\r\n  return (\r\n    <TouchableOpacity \r\n      style={isHighlighted ? styles.highlighted : styles.button} \r\n      onPress={() => onPress(id)}\r\n    >\r\n      <Text>{id}</Text>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  button: {\r\n    // your normal button styles\r\n  },\r\n  highlighted: {\r\n    // your highlighted button styles\r\n  },\r\n});\r\n\r\nexport default HighlightedButton;\r\n\r\nIn this example, the HighlightedButton component receives its id, whether it’s highlighted, and the onPress function as props. When the button is pressed, it calls the onPress function with its id as an argument. The MyComponent component keeps track of which button is currently highlighted and passes this information down to each HighlightedButton. I hope this helps! 😊\r\n\r\n*/\r\n\r\nconst ProgressBarButton = ({label, currentValue, maxValue, defaultActive}) => {\r\n\r\n    const [borderColor, setBorderColor] = useState(defaultActive ? constants.BLACK: constants.SECONDARYCOLOR);\r\n\r\n    const progressPercentage = Math.floor((currentValue / maxValue) * 100)\r\n    \r\n    const handlePress = () => {\r\n\r\n        // TODO: Fix this because it's stupid\r\n        setBorderColor(borderColor == constants.SECONDARYCOLOR ? constants.BLACK: constants.SECONDARYCOLOR)\r\n    };\r\n    \r\n    return (\r\n        <TouchableOpacity\r\n            activeOpacity={1}\r\n            style={{\r\n                ...styles.progressBarButton,\r\n                borderColor: borderColor\r\n            }}\r\n            onPress={handlePress}\r\n            >\r\n            <View style={{width: progressPercentage + '%', ...styles.progressBar}}></View>\r\n            <View style={styles.progressBarButtonTextContainer}>\r\n                <Text style={styles.progressBarButtonText}>{label}</Text>\r\n            </View>\r\n            <View style={styles.progressBarButtonNumberContainer}>\r\n                <Text style={styles.progressBarButtonNumberText}>{currentValue}</Text>\r\n            </View>\r\n        </TouchableOpacity>\r\n    );\r\n};\r\n\r\nconst WordItem = ({ item }) => {\r\n\r\n    const selectedStyling = {\r\n        'backgroundColor': constants.PRIMARYCOLOR,\r\n        'color': constants.TERTIARYCOLOR,\r\n        'numberBox': {\r\n            'backgroundColor': constants.TERTIARYCOLOR,\r\n            'color': constants.BLACK\r\n        }\r\n    }\r\n\r\n    const unselectedStyling = {\r\n        'backgroundColor': constants.SECONDARYCOLOR,\r\n        'color': constants.BLACK,\r\n        'numberBox': {\r\n            'backgroundColor': constants.PRIMARYCOLOR,\r\n            'color': constants.TERTIARYCOLOR\r\n        }\r\n    }\r\n    \r\n    const [styling, setStyling] = useState(item.user_knows ? selectedStyling: unselectedStyling);\r\n\r\n    return (\r\n        <View style={{\r\n            backgroundColor: styling.backgroundColor,\r\n            ...styles.wordItem\r\n            }}>\r\n            <View style={{\r\n                backgroundColor: styling.numberBox.backgroundColor,\r\n                ...styles.numberContainer\r\n                }}>\r\n                <Text style={{color: styling.numberBox.color, ...styles.numberText}}>{item.id}</Text>\r\n            </View>\r\n            <View style={styles.word}>\r\n                <Text style={{\r\n                    color: styling.color,\r\n                    ...styles.wordText\r\n                    }}>\r\n                    {capitalizeFirstLetter(item.word)}\r\n                </Text>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default function WordListScreen({navigation}: NativeStackHeaderProps) {\r\n\r\n    const { currentUser } = useContext(UserContext);\r\n    \r\n    const [words, setWords] = useState([]);\r\n    const [wordCounts, setWordCounts] = useState([]);\r\n    const [showLoadMore, setShowLoadMore] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchWordCounts();\r\n        fetchWordsData();\r\n    }, []);\r\n\r\n    const fetchWordCounts = async() => {\r\n        try {\r\n            const res = await client.get(\r\n                './api/users/' + currentUser.user_id + '/wordcounts',\r\n                { withCredentials: true }\r\n                );\r\n            setWordCounts(res.data);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const fetchWordsData = async() => {\r\n        try {\r\n            const res = await client.post('./api/words', {\r\n                start_index: 0,\r\n                end_index: 100,\r\n                withCredentials: true\r\n            });\r\n\r\n            // Don't need the word keys, just an array of each word's data\r\n            let valuesArray = Object.values(res.data);\r\n            setWords(valuesArray);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <SafeAreaView style={styles.container}>\r\n            <ScrollView\r\n                style={styles.topButtonContainer}\r\n                horizontal={true}\r\n                bounces={false}\r\n                showsVerticalScrollIndicator={false} \r\n                showsHorizontalScrollIndicator={false}\r\n                overScrollMode=\"never\"\r\n                >\r\n                <ProgressBarButton \r\n                    label={'0-1k'}\r\n                    currentValue={wordCounts['1-1000']}\r\n                    maxValue={1000}\r\n                    defaultActive={true}\r\n                />\r\n                <ProgressBarButton \r\n                    label={'1k-2k' }\r\n                    currentValue={wordCounts['1001-2000']}\r\n                    maxValue={1000}\r\n                    defaultActive={false}\r\n                />\r\n                <ProgressBarButton \r\n                    label={'2k-3k' }\r\n                    currentValue={wordCounts['2001-3000']}\r\n                    maxValue={1000}\r\n                    defaultActive={false}\r\n                />\r\n                <ProgressBarButton \r\n                    label={'3k-4k' }\r\n                    currentValue={wordCounts['3001-4000']}\r\n                    maxValue={1000}\r\n                    defaultActive={false}\r\n                />\r\n                <ProgressBarButton \r\n                    label={'4k-5k' }\r\n                    currentValue={wordCounts['4001-5000']}\r\n                    maxValue={1000}\r\n                    defaultActive={false}\r\n                />\r\n                <ProgressBarButton \r\n                    label={'5k+' }\r\n                    currentValue={wordCounts['5000+']}\r\n                    maxValue={1000}\r\n                    defaultActive={false}\r\n                />\r\n            </ScrollView>\r\n            <View style={styles.headerContainer}>\r\n                <Text style={styles.headerContainerText}>1000 Most Common</Text>\r\n            </View>\r\n            <FlatList\r\n                style={styles.wordList}\r\n                data={words}\r\n                bounces={false}\r\n                showsVerticalScrollIndicator={false} \r\n                showsHorizontalScrollIndicator={false}\r\n                overScrollMode=\"never\"\r\n                onEndReached={() => setShowLoadMore(true)}\r\n                onEndReachedThreshold={0.1}\r\n                //keyExtractor={(item) => item.username}\r\n                renderItem={({ item }) => (<WordItem item={item}></WordItem>)}\r\n                />\r\n            {showLoadMore && \r\n            <TouchableOpacity\r\n                activeOpacity={1}\r\n                style={styles.loadMoreButton}\r\n                onPress={() => {setShowLoadMore(false)}}\r\n            >\r\n                <Text style={styles.loadMoreButtonText}>Load more</Text>\r\n            </TouchableOpacity>\r\n            }\r\n        </SafeAreaView>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    \r\n    // WordListScreen\r\n    container: {\r\n        flex: 1,\r\n        //paddingTop: StatusBar.currentHeight,\r\n        marginHorizontal: 10,\r\n    },\r\n    topButtonContainer: {\r\n        flexDirection: 'row',\r\n        padding: 5,\r\n        marginBottom: 10\r\n        //flexWrap: 'wrap'\r\n    },\r\n    headerContainer: {\r\n        marginHorizontal: 10\r\n    },\r\n    headerContainerText: {\r\n        fontSize: constants.H2FONTSIZE,\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        color: constants.BLACK\r\n    },\r\n    wordList: {\r\n        height: \"100%\",\r\n        marginTop: 10,\r\n        marginHorizontal: 10\r\n    },\r\n    loadMoreButton: {\r\n        backgroundColor: constants.PRIMARYCOLOR,\r\n        borderRadius: 10,\r\n        width: 150,\r\n        padding: 5,\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        marginTop: 10\r\n    },\r\n    loadMoreButtonText: {\r\n        fontSize: constants.H2FONTSIZE,\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        color: constants.TERTIARYCOLOR,\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\"\r\n    },\r\n\r\n    // WordItem\r\n    wordItem: {\r\n        flexDirection: \"row\",\r\n        //justifyContent: 'space-between',\r\n        borderRadius: 10,\r\n        //borderRadius: 5,\r\n        marginBottom: 5,\r\n        padding: 10\r\n    },\r\n    numberContainer: {\r\n        borderRadius: 5,\r\n        padding: 5,\r\n        marginRight: 10\r\n    },\r\n    numberText: {\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        fontSize: constants.H3FONTSIZE\r\n    },\r\n    word: {\r\n        marginTop: 'auto',\r\n        marginBottom: 'auto'\r\n    },\r\n    wordText: {\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        fontSize: constants.H2FONTSIZE\r\n    },\r\n\r\n    // ProgressBarButton\r\n    progressBarButton: {\r\n        backgroundColor: constants.SECONDARYCOLOR,\r\n        flexDirection: \"row\",\r\n        borderWidth: 3,\r\n        borderRadius: 10,\r\n        overflow: 'hidden',\r\n        verticalAlign: 'center',\r\n        marginHorizontal: 5,\r\n        paddingHorizontal: 5,\r\n        marginBottom: 15,\r\n        height: 40\r\n    },\r\n    progressBarButtonTextContainer: {\r\n        marginTop: 'auto',\r\n        marginBottom: 'auto',\r\n        marginRight: 10\r\n    },\r\n    progressBarButtonText: {\r\n        fontSize: constants.H2FONTSIZE,\r\n        fontFamily: constants.FONTFAMILYBOLD\r\n    },\r\n    progressBarButtonNumberContainer: {\r\n        backgroundColor: constants.PRIMARYCOLOR,\r\n        paddingHorizontal: 5,\r\n        borderRadius: 5,\r\n        marginTop: 'auto',\r\n        marginBottom: 'auto'\r\n    },\r\n    progressBarButtonNumberText: {\r\n        fontSize: constants.H2FONTSIZE,\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        color: constants.TERTIARYCOLOR,\r\n    },\r\n    progressBar: {\r\n        position: 'absolute',\r\n        //top: -2,\r\n        //left: -2,\r\n        height: 40,\r\n        //borderRadius: 10,\r\n        backgroundColor: constants.PRIMARYCOLOR,\r\n        borderColor: constants.PRIMARYCOLOR\r\n    }\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}