{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Toby Usher\\\\Documents\\\\dev\\\\quivo-app\\\\frontend\\\\contexts\\\\UserContext.tsx\",\n  _this = this;\nimport React, { useState, useEffect } from 'react';\nimport client, { updateClientCsrfToken } from \"../utils/axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar UserContext = React.createContext({});\nexport default UserContext;\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentUser = _useState2[0],\n    setCurrentUser = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    knownLanguages = _useState4[0],\n    setKnownLanguages = _useState4[1];\n  var _useState5 = useState(50),\n    _useState6 = _slicedToArray(_useState5, 2),\n    knownWordsPercentage = _useState6[0],\n    setKnownWordsPercentage = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    knownWords = _useState8[0],\n    setKnownWords = _useState8[1];\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    soundActive = _useState10[0],\n    setSoundActive = _useState10[1];\n  var _useState11 = useState(1),\n    _useState12 = _slicedToArray(_useState11, 2),\n    narrationSpeed = _useState12[0],\n    setNarrationSpeed = _useState12[1];\n  var _useState13 = useState({}),\n    _useState14 = _slicedToArray(_useState13, 2),\n    wordCounts = _useState14[0],\n    setWordCounts = _useState14[1];\n  var _useState15 = useState(null),\n    _useState16 = _slicedToArray(_useState15, 2),\n    monthlyWordCounts = _useState16[0],\n    setMonthlyWordCounts = _useState16[1];\n  var _useState17 = useState(0),\n    _useState18 = _slicedToArray(_useState17, 2),\n    dailyWordCount = _useState18[0],\n    setDailyWordCount = _useState18[1];\n  var _useState19 = useState(0),\n    _useState20 = _slicedToArray(_useState19, 2),\n    userStreak = _useState20[0],\n    setUserStreak = _useState20[1];\n  var _useState21 = useState(null),\n    _useState22 = _slicedToArray(_useState21, 2),\n    currentLanguageCode = _useState22[0],\n    setCurrentLanguageCode = _useState22[1];\n  var _useState23 = useState(null),\n    _useState24 = _slicedToArray(_useState23, 2),\n    userAvatarId = _useState24[0],\n    setUserAvatarId = _useState24[1];\n  var _useState25 = useState(0),\n    _useState26 = _slicedToArray(_useState25, 2),\n    currentLanguageCompletedStories = _useState26[0],\n    setCurrentLanguageCompletedStories = _useState26[1];\n  useEffect(function () {\n    updateUserData();\n  }, []);\n  useEffect(function () {\n    if (currentUser) {\n      getCurrentLanguageCode();\n      getKnownLanguages();\n      setUserStreak(currentUser.streak);\n      setUserAvatarId(currentUser.avatar_id);\n    }\n  }, [currentUser]);\n  useEffect(function () {\n    if (currentUser && currentLanguageCode) {\n      setKnownWords(currentUser.known_words_count[currentLanguageCode]);\n      getWordCounts();\n      updateMonthlyWordCounts(currentUser.user_id, currentLanguageCode);\n    }\n  }, [currentLanguageCode]);\n  var updateUserData = function updateUserData() {\n    client.get('/api/users/me').then(function (res) {\n      setCurrentUser(res.data.user);\n    }).catch(function (error) {\n      setCurrentUser(null);\n      console.log(error);\n    });\n  };\n  var updateMonthlyWordCounts = function updateMonthlyWordCounts(userId, languageCode) {\n    client.get('./api/users/' + userId + '/monthlywordcounts/' + languageCode).then(function (res) {\n      setMonthlyWordCounts(res.data);\n      setDailyWordCount(res.data[res.data.length - 1].word_count);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n  var updateCurrentLanguageCode = function updateCurrentLanguageCode(language_code) {\n    client.post('api/users/changecurrentlanguage', {\n      language_code: language_code,\n      withCredentials: true\n    }).then(function (res) {\n      getCurrentLanguageCode();\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n  var getKnownLanguages = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      return client.get(\"/api/users/\" + currentUser.user_id + \"/knownlanguages\", {\n        withCredentials: true\n      }).then(function (res) {\n        setKnownLanguages(res.data);\n      }).catch(function (error) {});\n    });\n    return function getKnownLanguages() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var getCurrentLanguageCode = function getCurrentLanguageCode() {\n    client.get(\"./api/users/currentlanguage\").then(function (res) {\n      setCurrentLanguageCode(res.data);\n    }).catch(function (error) {\n      console.log(error);\n      setCurrentLanguageCode(currentUser.last_current_language);\n    });\n  };\n  var getWordCounts = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var res = yield client.get('./api/users/' + currentUser.user_id + '/wordcounts', {\n          withCredentials: true\n        });\n        setWordCounts(res.data);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    return function getWordCounts() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var submitRegistration = function submitRegistration(username, email, password) {\n    return new Promise(function (resolve, reject) {\n      client.post(\"/api/register\", {\n        username: username,\n        email: email,\n        password: password,\n        withCredentials: true\n      }).then(function (res) {\n        console.log('Account creation successful');\n        submitLogin(username, password);\n        resolve(true);\n      }).catch(function (error) {\n        console.log('Account creation unsuccessful');\n        reject(error);\n      });\n    });\n  };\n  var submitLogin = function submitLogin(username, password) {\n    return new Promise(function (resolve, reject) {\n      client.post(\"/api/login\", {\n        username: username,\n        password: password,\n        withCredentials: true\n      }).then(function (res) {\n        updateClientCsrfToken();\n        updateUserData();\n        console.log('Login successful!');\n        resolve(true);\n      }).catch(function (error) {\n        setCurrentUser(null);\n        console.log('Login unsuccessful');\n        reject(error);\n      });\n    });\n  };\n  var submitLogout = function submitLogout() {\n    client.post(\"/api/logout\").then(function (res) {\n      setCurrentUser(null);\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  };\n  return _jsxDEV(UserContext.Provider, {\n    value: {\n      currentUser: currentUser,\n      knownLanguages: knownLanguages,\n      knownWordsPercentage: knownWordsPercentage,\n      currentLanguageCode: currentLanguageCode,\n      userAvatarId: userAvatarId,\n      knownWords: knownWords,\n      soundActive: soundActive,\n      narrationSpeed: narrationSpeed,\n      wordCounts: wordCounts,\n      monthlyWordCounts: monthlyWordCounts,\n      dailyWordCount: dailyWordCount,\n      userStreak: userStreak,\n      currentLanguageCompletedStories: currentLanguageCompletedStories,\n      updateCurrentLanguageCode: updateCurrentLanguageCode,\n      updateUserData: updateUserData,\n      setKnownWordsPercentage: setKnownWordsPercentage,\n      setUserAvatarId: setUserAvatarId,\n      setKnownWords: setKnownWords,\n      setSoundActive: setSoundActive,\n      setNarrationSpeed: setNarrationSpeed,\n      setDailyWordCount: setDailyWordCount,\n      setUserStreak: setUserStreak,\n      setCurrentLanguageCompletedStories: setCurrentLanguageCompletedStories,\n      submitRegistration: submitRegistration,\n      submitLogin: submitLogin,\n      submitLogout: submitLogout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 9\n  }, _this);\n};","map":{"version":3,"names":["React","useState","useEffect","client","updateClientCsrfToken","jsxDEV","_jsxDEV","UserContext","createContext","AuthProvider","_ref","children","_useState","_useState2","_slicedToArray","currentUser","setCurrentUser","_useState3","_useState4","knownLanguages","setKnownLanguages","_useState5","_useState6","knownWordsPercentage","setKnownWordsPercentage","_useState7","_useState8","knownWords","setKnownWords","_useState9","_useState10","soundActive","setSoundActive","_useState11","_useState12","narrationSpeed","setNarrationSpeed","_useState13","_useState14","wordCounts","setWordCounts","_useState15","_useState16","monthlyWordCounts","setMonthlyWordCounts","_useState17","_useState18","dailyWordCount","setDailyWordCount","_useState19","_useState20","userStreak","setUserStreak","_useState21","_useState22","currentLanguageCode","setCurrentLanguageCode","_useState23","_useState24","userAvatarId","setUserAvatarId","_useState25","_useState26","currentLanguageCompletedStories","setCurrentLanguageCompletedStories","updateUserData","getCurrentLanguageCode","getKnownLanguages","streak","avatar_id","known_words_count","getWordCounts","updateMonthlyWordCounts","user_id","get","then","res","data","user","catch","error","console","log","userId","languageCode","length","word_count","updateCurrentLanguageCode","language_code","post","withCredentials","_ref2","_asyncToGenerator","apply","arguments","last_current_language","_ref3","submitRegistration","username","email","password","Promise","resolve","reject","submitLogin","submitLogout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_this"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/contexts/UserContext.tsx"],"sourcesContent":["import React, { ReactNode, useState, useEffect } from 'react';\r\nimport client, { updateClientCsrfToken } from \"../utils/axios\"\r\n\r\nconst UserContext = React.createContext({});\r\n\r\nexport default UserContext;\r\n\r\ninterface IUser {\r\n    email: string,\r\n    followers_count: number,\r\n    following_count: number,\r\n    known_languages: number[], \r\n    known_words_count: object,\r\n    user_id: number,\r\n    user_is_following: boolean,\r\n    username: string//,\r\n    //completed_stories: Record<string, number>\r\n}\r\n\r\ninterface ILanguage {\r\n    id: number,\r\n    language_code: string,\r\n    language_name: string\r\n}\r\n\r\n// Create a provider component\r\nexport const AuthProvider = ({ children }: {children: ReactNode}) => {\r\n\r\n    // TODO: Clean up the user context\r\n\r\n    const [currentUser, setCurrentUser] = useState<IUser|null>(null);\r\n    const [knownLanguages, setKnownLanguages] = useState<ILanguage[]>([]);\r\n    // TODO: This should be stored in the database for each user\r\n    const [knownWordsPercentage, setKnownWordsPercentage] = useState<(20|30|40|50|60|70|80)>(50);\r\n    const [knownWords, setKnownWords] = useState<number>(0);\r\n    const [soundActive, setSoundActive] = useState<boolean>(true); // TODO: Link this to the user account on the backend\r\n    const [narrationSpeed, setNarrationSpeed] = useState<0|1|2>(1) // TODO: link this to user account on the backend\r\n    const [wordCounts, setWordCounts] = useState<Record<string, number>>({});\r\n    const [monthlyWordCounts, setMonthlyWordCounts] = useState<number[]>(null);\r\n    const [dailyWordCount, setDailyWordCount] = useState<number>(0);\r\n    const [userStreak, setUserStreak] = useState<number>(0);\r\n    const [currentLanguageCode, setCurrentLanguageCode] = useState<string|null>(null);\r\n    const [userAvatarId, setUserAvatarId] = useState<number|null>(null); \r\n    // This should be associated with the currentUser account\r\n    const [currentLanguageCompletedStories, setCurrentLanguageCompletedStories] = useState<number>(0);   \r\n\r\n    useEffect(() => {\r\n        updateUserData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(currentUser){\r\n            getCurrentLanguageCode();\r\n            getKnownLanguages();\r\n            setUserStreak(currentUser.streak);\r\n            setUserAvatarId(currentUser.avatar_id);\r\n        }\r\n    }, [currentUser]);\r\n\r\n    useEffect(() => {\r\n        if (currentUser && currentLanguageCode) {\r\n            setKnownWords(currentUser.known_words_count[currentLanguageCode]);\r\n            getWordCounts();\r\n            updateMonthlyWordCounts(currentUser.user_id, currentLanguageCode);\r\n        }\r\n    }, [currentLanguageCode]);\r\n\r\n    const updateUserData = () => {\r\n        client.get('/api/users/me')\r\n        .then(function(res) {\r\n            setCurrentUser(res.data.user);\r\n        })\r\n        .catch(function(error) {\r\n            setCurrentUser(null);\r\n            console.log(error);\r\n        });\r\n    };\r\n\r\n    const updateMonthlyWordCounts = (userId: number, languageCode: string) => {\r\n        client.get('./api/users/' + userId + '/monthlywordcounts/' + languageCode)\r\n        .then((res) => {\r\n            setMonthlyWordCounts(res.data);\r\n            setDailyWordCount(res.data[res.data.length - 1].word_count);\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    const updateCurrentLanguageCode = (language_code: string) => {\r\n        client.post('api/users/changecurrentlanguage', {\r\n            language_code: language_code,\r\n            withCredentials: true\r\n        }).then((res) => {\r\n            // Only update the hook if language session data changed\r\n            // Probably don't need two api requests here. Could just\r\n            // return current language data from changecurrentlanguage\r\n            // endpoint\r\n            getCurrentLanguageCode()\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    const getKnownLanguages = async () => {\r\n        return client.get(\"/api/users/\" + currentUser.user_id + \"/knownlanguages\", { withCredentials: true })\r\n        .then(function(res) {\r\n            setKnownLanguages(res.data);\r\n        })\r\n        .catch(function(error) {\r\n        });\r\n    };\r\n\r\n    const getCurrentLanguageCode = () => {\r\n        client.get(\"./api/users/currentlanguage\")\r\n        .then(function(res){\r\n            setCurrentLanguageCode(res.data);\r\n        }).catch(function(error){\r\n            console.log(error);\r\n            setCurrentLanguageCode(currentUser.last_current_language);\r\n        })\r\n    }\r\n\r\n    const getWordCounts = async() => {\r\n        try {\r\n            const res = await client.get(\r\n                './api/users/' + currentUser.user_id + '/wordcounts',\r\n                { withCredentials: true }\r\n                );\r\n            setWordCounts(res.data);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const submitRegistration = (\r\n        username: string,\r\n        email: string,\r\n        password: string\r\n        ) => {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            client.post(\r\n            \"/api/register\",\r\n            {\r\n                username: username,\r\n                email: email,\r\n                password: password,\r\n                withCredentials: true\r\n            }\r\n            ).then(function(res) {\r\n                console.log('Account creation successful');\r\n                submitLogin(username, password);\r\n                resolve(true);\r\n            }).catch(function(error) {\r\n                console.log('Account creation unsuccessful');\r\n                reject(error);\r\n            });\r\n        });\r\n    };\r\n    \r\n    const submitLogin = (username: string, password: string) => {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            client.post(\r\n                \"/api/login\",\r\n                {\r\n                username: username,\r\n                password: password,\r\n                withCredentials: true\r\n                }\r\n            ).then(function(res) {\r\n                // Fetch the new CSRF token from the db and update the axios client header\r\n                updateClientCsrfToken();\r\n                // Get the current user data and set the context\r\n                updateUserData();\r\n                console.log('Login successful!')\r\n                resolve(true);\r\n            }).catch(function(error) {\r\n                setCurrentUser(null);\r\n                console.log('Login unsuccessful');\r\n                reject(error);\r\n            });\r\n        });\r\n    };\r\n    \r\n    const submitLogout = () => {\r\n        client.post(\r\n            \"/api/logout\"\r\n        ).then(function(res) {\r\n            setCurrentUser(null);\r\n        }).catch(\r\n            error => console.log(error)\r\n        );\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider value={{\r\n            currentUser,\r\n            knownLanguages,\r\n            knownWordsPercentage,\r\n            currentLanguageCode,\r\n            userAvatarId,\r\n            knownWords,\r\n            soundActive,\r\n            narrationSpeed,\r\n            wordCounts,\r\n            monthlyWordCounts,\r\n            dailyWordCount,\r\n            userStreak,\r\n            currentLanguageCompletedStories,\r\n            updateCurrentLanguageCode,\r\n            updateUserData,\r\n            setKnownWordsPercentage,\r\n            setUserAvatarId,\r\n            setKnownWords,\r\n            setSoundActive,\r\n            setNarrationSpeed,\r\n            setDailyWordCount,\r\n            setUserStreak,\r\n            setCurrentLanguageCompletedStories,\r\n            submitRegistration,\r\n            submitLogin,\r\n            submitLogout\r\n            }}>\r\n          {children}\r\n        </UserContext.Provider>\r\n      );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}