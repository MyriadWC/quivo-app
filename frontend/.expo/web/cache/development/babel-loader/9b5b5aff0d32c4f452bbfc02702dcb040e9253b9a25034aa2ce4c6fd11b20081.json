{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useRef } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nexport default function useLanguagePopupVisible() {\n  var languagePopupAnimation = useRef(new Animated.Value(0)).current;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    languagePopupVisible = _useState2[0],\n    setLanguagePopupVisible = _useState2[1];\n  var toggleLanguagePopup = function toggleLanguagePopup() {\n    Animated.timing(languagePopupAnimation, {\n      toValue: languagePopupVisible ? 0 : 70,\n      duration: 400,\n      useNativeDriver: false\n    }).start(function () {\n      setLanguagePopupVisible(!languagePopupVisible);\n    });\n    if (languagePopupVisible) {\n      setLanguagePopupVisible(false);\n    }\n  };\n  return {\n    languagePopupVisible: languagePopupVisible,\n    languagePopupAnimation: languagePopupAnimation,\n    toggleLanguagePopup: toggleLanguagePopup\n  };\n}","map":{"version":3,"names":["useState","useRef","Animated","useLanguagePopupVisible","languagePopupAnimation","Value","current","_useState","_useState2","_slicedToArray","languagePopupVisible","setLanguagePopupVisible","toggleLanguagePopup","timing","toValue","duration","useNativeDriver","start"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/screens/LearnScreen/hooks/useLanguagePopupVisible.ts"],"sourcesContent":["import { useState, useRef } from \"react\";\r\nimport { Animated } from \"react-native\";\r\n\r\nexport default function useLanguagePopupVisible(){\r\n\r\n    const languagePopupAnimation = useRef(new Animated.Value(0)).current;\r\n\r\n    const [languagePopupVisible, setLanguagePopupVisible] = useState(false);\r\n\r\n    const toggleLanguagePopup = () => {\r\n        Animated.timing(languagePopupAnimation, {\r\n        toValue: languagePopupVisible ? 0 : 70,\r\n        duration: 400,\r\n        useNativeDriver: false,\r\n        }).start(() => {\r\n            setLanguagePopupVisible(!languagePopupVisible);\r\n        });\r\n        if (languagePopupVisible) {\r\n            setLanguagePopupVisible(false);\r\n        }\r\n    };\r\n\r\n    return { languagePopupVisible, languagePopupAnimation, toggleLanguagePopup };\r\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,OAAAC,QAAA;AAGzC,eAAe,SAASC,uBAAuBA,CAAA,EAAE;EAE7C,IAAMC,sBAAsB,GAAGH,MAAM,CAAC,IAAIC,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EAEpE,IAAAC,SAAA,GAAwDP,QAAQ,CAAC,KAAK,CAAC;IAAAQ,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhEG,oBAAoB,GAAAF,UAAA;IAAEG,uBAAuB,GAAAH,UAAA;EAEpD,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAA,EAAS;IAC9BV,QAAQ,CAACW,MAAM,CAACT,sBAAsB,EAAE;MACxCU,OAAO,EAAEJ,oBAAoB,GAAG,CAAC,GAAG,EAAE;MACtCK,QAAQ,EAAE,GAAG;MACbC,eAAe,EAAE;IACjB,CAAC,CAAC,CAACC,KAAK,CAAC,YAAM;MACXN,uBAAuB,CAAC,CAACD,oBAAoB,CAAC;IAClD,CAAC,CAAC;IACF,IAAIA,oBAAoB,EAAE;MACtBC,uBAAuB,CAAC,KAAK,CAAC;IAClC;EACJ,CAAC;EAED,OAAO;IAAED,oBAAoB,EAApBA,oBAAoB;IAAEN,sBAAsB,EAAtBA,sBAAsB;IAAEQ,mBAAmB,EAAnBA;EAAoB,CAAC;AAChF"},"metadata":{},"sourceType":"module","externalDependencies":[]}