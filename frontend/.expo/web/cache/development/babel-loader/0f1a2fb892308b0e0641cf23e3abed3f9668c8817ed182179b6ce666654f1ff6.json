{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Toby Usher\\\\Documents\\\\dev\\\\quivo-app\\\\frontend\\\\screens\\\\SliderScreen\\\\components\\\\SetKnownWordsPanel.tsx\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useEffect, useState, useContext } from \"react\";\nimport UserContext from '../../../contexts/UserContext';\nimport Slider from '@react-native-community/slider';\nimport * as constants from \"../../../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SetKnownWordsPanel() {\n  var _useContext = useContext(UserContext),\n    currentUser = _useContext.currentUser,\n    currentLanguageCode = _useContext.currentLanguageCode,\n    knownWordsPercentage = _useContext.knownWordsPercentage,\n    setKnownWordsPercentage = _useContext.setKnownWordsPercentage;\n  var exampleSentences = {\n    'fr': 'Malgré la pluie, Marie a décidé de sortir pour acheter des légumes frais au marché local ce matin.',\n    'de': 'Obwohl es regnet, gehen wir spazieren, weil wir die frische Luft und die Schönheit der Natur sehr genießen.',\n    'ru': 'Мама всегда говорила, что жизнь похожа на коробку шоколадных конфет: никогда не знаешь, какую конфету ты достанешь.',\n    'th': 'มชอบที่จะเดินเล่นในสวนสาธารณะหลังจากที่ทำงานเสร็จเพื่อผ่อนคลายและสัมผัสกับธรรมชาติที่สวยงาม'\n  };\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    sentenceComponents = _useState2[0],\n    setSentenceComponents = _useState2[1];\n  var _useState3 = useState([1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    activeWordMask = _useState4[0],\n    setActiveWordMask = _useState4[1];\n  useEffect(function () {\n    setActiveWordMask(createActiveWordMask());\n  }, [knownWordsPercentage, currentLanguageCode]);\n  useEffect(function () {\n    var components = currentLanguageCode == 'th' ? formatThaiSentence(exampleSentences[currentLanguageCode]) : formatSentence(exampleSentences[currentLanguageCode]);\n    setSentenceComponents(components);\n  }, [activeWordMask]);\n  function formatSentence(sentence) {\n    var wordsRegex = {\n      'fr': /(?:[Aa]ujourd\\'hui|[Pp]resqu\\'île|[Qq]uelqu\\'un|[Dd]\\'accord|-t-|[a-zA-Z0-9éèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+)/g,\n      'de': /(?:[a-zA-ZäöüÄÖÜß]+)/g,\n      'ru': /(?:[А-Яа-яЁё]+)/g\n    };\n    var inclusiveRegex = {\n      'fr': /(?:[Aa]ujourd\\'hui|[Pp]resqu\\'île|[Qq]uelqu\\'un|[Dd]\\'accord|-t-|[a-zA-Z0-9éèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+|[^a-zA-Z0-9éèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+)/g,\n      'de': /(?:[a-zA-ZäöüÄÖÜß]+|[^a-zA-ZäöüÄÖÜß])/g,\n      'ru': /(?:[А-Яа-яЁё]+|[^А-Яа-яЁё])/g\n    };\n    var words = sentence.match(wordsRegex[currentLanguageCode]) || [];\n    var splitSentence = sentence.match(inclusiveRegex[currentLanguageCode]) || [];\n    var sentenceComponents = [];\n    var wordIndex = 0;\n    for (var i = 0; i < splitSentence.length; i++) {\n      var substring = splitSentence[i];\n      if (words.includes(substring)) {\n        var wordColor = activeWordMask[wordIndex] ? constants.BLACK : constants.GREY;\n        wordIndex++;\n        sentenceComponents.push(_jsxDEV(Text, {\n          style: _objectSpread({\n            color: wordColor\n          }, styles.exampleSentenceText),\n          children: substring\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this));\n      } else {\n        sentenceComponents.push(_jsxDEV(Text, {\n          style: _objectSpread({\n            color: constants.GREY\n          }, styles.exampleSentenceText),\n          children: substring\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this));\n      }\n    }\n    ;\n    return sentenceComponents;\n  }\n  var formatThaiSentence = function formatThaiSentence(sentence) {\n    return [];\n  };\n  function createInitialActiveWordMask(num_words, percentage) {\n    var array = Array(num_words).fill(0).map(function (v, i) {\n      return i < num_words * percentage ? 1 : 0;\n    });\n    array.sort(function () {\n      return Math.random() - 0.5;\n    });\n    return array;\n  }\n  function replaceValues(array, n, to_replace) {\n    var indices = array.reduce(function (result, value, index) {\n      if (value === to_replace) result.push(index);\n      return result;\n    }, []);\n    var indicesToReplace = indices.sort(function () {\n      return 0.5 - Math.random();\n    }).slice(to_replace, n);\n    indicesToReplace.forEach(function (index) {\n      return array[index] = to_replace === 0 ? 1 : 0;\n    });\n    return _toConsumableArray(array);\n  }\n  function createActiveWordMask() {\n    var totalWords = activeWordMask.length;\n    var newActiveWordCount = activeWordMask.filter(function (num) {\n      return num === 1;\n    }).length;\n    var newKnownWordsPerc = Math.round(newActiveWordCount / totalWords * 10) * 10;\n    var percChange = knownWordsPercentage - newKnownWordsPerc;\n    var absWordChange = Math.abs(Math.round(percChange * totalWords / 100));\n    if (percChange > 0) {\n      return replaceValues(activeWordMask, absWordChange, 0);\n    } else if (percChange < 0) {\n      return replaceValues(activeWordMask, absWordChange, 1);\n    }\n    return activeWordMask;\n  }\n  return _jsxDEV(View, {\n    style: styles.mainContainer,\n    children: [_jsxDEV(View, {\n      style: styles.sliderHeaderContainer,\n      children: _jsxDEV(Text, {\n        style: styles.sliderHeaderText,\n        children: \"Known Words Per Sentence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this), _jsxDEV(Text, {\n      style: styles.knownWordsPercText,\n      children: [knownWordsPercentage, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this), _jsxDEV(View, {\n      style: styles.sliderContainer,\n      children: _jsxDEV(Slider, {\n        style: {\n          height: 65,\n          padding: 0,\n          margin: 0,\n          transform: [{\n            scaleX: 1.6\n          }, {\n            scaleY: 1.6\n          }]\n        },\n        minimumValue: 20,\n        maximumValue: 80,\n        value: knownWordsPercentage,\n        onValueChange: setKnownWordsPercentage,\n        step: 10,\n        minimumTrackTintColor: constants.PURPLEREGULAR,\n        maximumTrackTintColor: constants.GREY,\n        thumbTintColor: constants.PURPLEREGULAR\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), _jsxDEV(View, {\n      style: styles.exampleSentenceContainer,\n      children: _jsxDEV(Text, {\n        style: styles.exampleSentenceText,\n        children: sentenceComponents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}\nvar styles = StyleSheet.create({\n  mainContainer: {\n    borderWidth: 3,\n    borderColor: constants.GREY,\n    padding: 10,\n    borderRadius: 20,\n    marginBottom: 20\n  },\n  sliderHeaderContainer: {\n    marginVertical: 10\n  },\n  sliderHeaderText: {\n    fontFamily: constants.FONTFAMILYBOLD,\n    fontSize: constants.H2FONTSIZE,\n    color: constants.BLACK,\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  },\n  sliderContainer: {\n    width: '100%',\n    paddingHorizontal: '20%',\n    marginTop: -20,\n    marginBottom: -10,\n    flexDirection: 'column'\n  },\n  knownWordsPercText: {\n    fontFamily: constants.FONTFAMILYBOLD,\n    fontSize: constants.H1FONTSIZE,\n    color: constants.PURPLEREGULAR,\n    marginBottom: 10,\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  },\n  exampleSentenceContainer: {\n    marginBottom: 10\n  },\n  exampleSentenceText: {\n    fontFamily: constants.FONTFAMILY,\n    fontSize: constants.H2FONTSIZE,\n    textAlign: 'center'\n  }\n});","map":{"version":3,"names":["useEffect","useState","useContext","UserContext","Slider","constants","jsxDEV","_jsxDEV","SetKnownWordsPanel","_useContext","currentUser","currentLanguageCode","knownWordsPercentage","setKnownWordsPercentage","exampleSentences","_useState","_useState2","_slicedToArray","sentenceComponents","setSentenceComponents","_useState3","_useState4","activeWordMask","setActiveWordMask","createActiveWordMask","components","formatThaiSentence","formatSentence","sentence","wordsRegex","inclusiveRegex","words","match","splitSentence","wordIndex","i","length","substring","includes","wordColor","BLACK","GREY","push","Text","style","_objectSpread","color","styles","exampleSentenceText","children","fileName","_jsxFileName","lineNumber","columnNumber","createInitialActiveWordMask","num_words","percentage","array","Array","fill","map","v","sort","Math","random","replaceValues","n","to_replace","indices","reduce","result","value","index","indicesToReplace","slice","forEach","_toConsumableArray","totalWords","newActiveWordCount","filter","num","newKnownWordsPerc","round","percChange","absWordChange","abs","View","mainContainer","sliderHeaderContainer","sliderHeaderText","knownWordsPercText","sliderContainer","height","padding","margin","transform","scaleX","scaleY","minimumValue","maximumValue","onValueChange","step","minimumTrackTintColor","PURPLEREGULAR","maximumTrackTintColor","thumbTintColor","exampleSentenceContainer","StyleSheet","create","borderWidth","borderColor","borderRadius","marginBottom","marginVertical","fontFamily","FONTFAMILYBOLD","fontSize","H2FONTSIZE","marginLeft","marginRight","width","paddingHorizontal","marginTop","flexDirection","H1FONTSIZE","FONTFAMILY","textAlign"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/screens/SliderScreen/components/SetKnownWordsPanel.tsx"],"sourcesContent":["import { StyleSheet, View, Text } from \"react-native\";\r\nimport { useEffect, useState, useContext } from \"react\";\r\nimport UserContext from '../../../contexts/UserContext';\r\nimport Slider from '@react-native-community/slider';\r\nimport * as constants from \"../../../constants\";\r\n\r\nexport default function SetKnownWordsPanel() {\r\n\r\n    const { currentUser, currentLanguageCode, knownWordsPercentage, setKnownWordsPercentage } = useContext(UserContext);\r\n\r\n    const exampleSentences: Record<string, string> = {\r\n        'fr': 'Malgré la pluie, Marie a décidé de sortir pour acheter des légumes frais au marché local ce matin.',\r\n        'de': 'Obwohl es regnet, gehen wir spazieren, weil wir die frische Luft und die Schönheit der Natur sehr genießen.',\r\n        'ru': 'Мама всегда говорила, что жизнь похожа на коробку шоколадных конфет: никогда не знаешь, какую конфету ты достанешь.',\r\n        'th': 'มชอบที่จะเดินเล่นในสวนสาธารณะหลังจากที่ทำงานเสร็จเพื่อผ่อนคลายและสัมผัสกับธรรมชาติที่สวยงาม'\r\n    }\r\n\r\n    const [sentenceComponents, setSentenceComponents] = useState<React.JSX.Element[]>([]);\r\n    const [activeWordMask, setActiveWordMask] = useState<(0 | 1)[]>([1,0,0,1,0,1,1,1,0,0,0,1,0,1,0,1,1,0,1,0]);\r\n    //const [activeWordMask, setActiveWordMask] = useState(createInitialActiveWordMask(20, 50))\r\n\r\n    useEffect(() => {\r\n        // TODO: Changing the language doesn't cause this to update straight away\r\n        setActiveWordMask(createActiveWordMask());\r\n    }, [knownWordsPercentage, currentLanguageCode]);\r\n\r\n    useEffect(() => {\r\n        let components: React.JSX.Element[] = (\r\n            currentLanguageCode == 'th'\r\n            ? formatThaiSentence(exampleSentences[currentLanguageCode])\r\n            : formatSentence(exampleSentences[currentLanguageCode])\r\n        );\r\n        setSentenceComponents(components);\r\n    }, [activeWordMask]);\r\n\r\n    function formatSentence(sentence: string) {\r\n\r\n        // Want to match into one of two categories: valid french words (using same regex as one shown above) and everything else\r\n        const wordsRegex: Record<string, RegExp> = {\r\n            'fr': /(?:[Aa]ujourd\\'hui|[Pp]resqu\\'île|[Qq]uelqu\\'un|[Dd]\\'accord|-t-|[a-zA-Z0-9éèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+)/g,\r\n            'de': /(?:[a-zA-ZäöüÄÖÜß]+)/g,\r\n            'ru': /(?:[А-Яа-яЁё]+)/g\r\n        };\r\n\r\n        const inclusiveRegex: Record<string, RegExp> = {\r\n            'fr': /(?:[Aa]ujourd\\'hui|[Pp]resqu\\'île|[Qq]uelqu\\'un|[Dd]\\'accord|-t-|[a-zA-Z0-9éèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+|[^a-zA-Z0-9éèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+)/g,\r\n            'de': /(?:[a-zA-ZäöüÄÖÜß]+|[^a-zA-ZäöüÄÖÜß])/g,\r\n            'ru': /(?:[А-Яа-яЁё]+|[^А-Яа-яЁё])/g\r\n        };\r\n        \r\n        const words = sentence.match(wordsRegex[currentLanguageCode]) || [];\r\n        const splitSentence = sentence.match(inclusiveRegex[currentLanguageCode]) || [];\r\n\r\n        const sentenceComponents = [];\r\n\r\n        let wordIndex = 0;\r\n\r\n        for (let i = 0; i < splitSentence.length; i++) {\r\n            \r\n            let substring: string = splitSentence[i];\r\n            \r\n            // Same as word unless in shortened_word_map\r\n            if (words.includes(substring)) {\r\n                let wordColor = activeWordMask[wordIndex] ? constants.BLACK : constants.GREY\r\n                wordIndex++;\r\n                sentenceComponents.push(\r\n                    <Text style={{ color: wordColor, ...styles.exampleSentenceText }} key={i}>\r\n                        {substring}\r\n                    </Text>\r\n                );\r\n            } else {\r\n                sentenceComponents.push(\r\n                    <Text style={{ color: constants.GREY, ...styles.exampleSentenceText }} key={i}>\r\n                        {substring}\r\n                    </Text>\r\n                );\r\n            }\r\n        };\r\n\r\n        return sentenceComponents;\r\n    }\r\n\r\n    const formatThaiSentence = (sentence: string) => {\r\n        \r\n        /*const sentenceComponents: Element[] = [];\r\n        const sentenceLength = sentence.length;\r\n        \r\n        if (sentenceLength == 0) {\r\n            return <Text></Text>;\r\n        }\r\n\r\n        // Loop through words\r\n        currentItem.split_sentence.forEach((particle, index) => {\r\n            \r\n            if (wordsData.hasOwnProperty(particle)) {\r\n                sentenceComponents.push(<Word\r\n                    navigation={navigation}\r\n                    primaryColor={constants.BLACK}\r\n                    word={particle}\r\n                    wordData={wordsData[particle]}\r\n                    textColor={activeWords.includes(particle) ? primaryColor : primaryColor + '55'}\r\n                    onPress={handleWordPress}\r\n                    isFirstWord={index==0}\r\n                    screenWidth={screenWidth}\r\n                    index={index}\r\n                    key={`${currentItem.id}-${index}`}\r\n                />);\r\n            } else {\r\n                sentenceComponents.push(<Text style={{\r\n                    color: primaryColor + '55',\r\n                    fontSize: constants.H1FONTSIZE + 7,\r\n                    fontFamily: constants.FONTFAMILYBOLD,\r\n                    textAlign: \"center\" \r\n                }} key={index}>{index==0 ? capitalizeFirstLetter(particle) : particle}</Text>);\r\n            }\r\n        });\r\n\r\n        return sentenceComponents;\r\n        */\r\n       return [];\r\n    }\r\n\r\n    function createInitialActiveWordMask(num_words: number, percentage: number) {\r\n        let array = Array(num_words).fill(0).map((v, i) => i < num_words * percentage ? 1 : 0);\r\n        array.sort(() => Math.random() - 0.5);\r\n        return array;\r\n    }\r\n\r\n    function replaceValues(array: (0 | 1)[], n: number, to_replace: number) {\r\n        // Get the indices of values to replace\r\n        var indices = array.reduce(function(result, value, index) {\r\n            if (value === to_replace) result.push(index);\r\n            return result;\r\n        }, []);\r\n        \r\n        // Randomly select n indices to replace\r\n        var indicesToReplace = indices.sort(() => 0.5 - Math.random()).slice(to_replace, n);\r\n\r\n        // Replace the selected indices with ones\r\n        indicesToReplace.forEach(\r\n            index => array[index] = (to_replace === 0 ? 1 : 0)\r\n            );\r\n        \r\n        // Need to return a copy to trigger hook update\r\n        return [...array];\r\n    }\r\n\r\n    function createActiveWordMask() {\r\n        \r\n        const totalWords = activeWordMask.length;\r\n        \r\n        const newActiveWordCount = activeWordMask.filter(num => num === 1).length;\r\n        // Find new known words percentage to the nearest 10%\r\n        const newKnownWordsPerc = Math.round((newActiveWordCount / totalWords) * 10) * 10;\r\n        \r\n        const percChange = knownWordsPercentage - newKnownWordsPerc;\r\n        const absWordChange = Math.abs(Math.round(percChange * totalWords / 100));\r\n        \r\n        if (percChange > 0) {\r\n            // Percentage has increased. Need to make new words active\r\n            return replaceValues(activeWordMask, absWordChange, 0);\r\n\r\n        } else if (percChange < 0) {\r\n            // Percentage has decreased, so need to deactivate some active words\r\n            return replaceValues(activeWordMask, absWordChange, 1);\r\n        }\r\n\r\n        return activeWordMask;\r\n    }\r\n\r\n    return (\r\n    <View style={styles.mainContainer}>\r\n        <View style={styles.sliderHeaderContainer}>\r\n            <Text style={styles.sliderHeaderText}>Known Words Per Sentence</Text>\r\n        </View>\r\n        <Text style={styles.knownWordsPercText}>{knownWordsPercentage}%</Text>\r\n        <View style={styles.sliderContainer}>\r\n            <Slider\r\n                style={{height: 65, padding: 0, margin: 0, transform: [{ scaleX: 1.6 }, { scaleY: 1.6 }]}}\r\n                minimumValue={20}\r\n                maximumValue={80}\r\n                value={knownWordsPercentage}\r\n                onValueChange={setKnownWordsPercentage}\r\n                step={10}\r\n                minimumTrackTintColor={constants.PURPLEREGULAR}\r\n                maximumTrackTintColor={constants.GREY}\r\n                thumbTintColor={constants.PURPLEREGULAR}\r\n            />\r\n        </View>\r\n        <View style={styles.exampleSentenceContainer}>\r\n            <Text style={styles.exampleSentenceText}>\r\n                {sentenceComponents}\r\n            </Text>\r\n        </View>\r\n    </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    mainContainer: {\r\n        //backgroundColor: constants.PURPLEREGULAR + '22',\r\n        borderWidth: 3,\r\n        borderColor: constants.GREY,\r\n        padding: 10,\r\n        borderRadius: 20,\r\n        marginBottom: 20\r\n    },\r\n    sliderHeaderContainer: {\r\n        marginVertical: 10,\r\n    },\r\n    sliderHeaderText: {\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        fontSize: constants.H2FONTSIZE,\r\n        color: constants.BLACK,\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto'\r\n    },\r\n    sliderContainer: {\r\n        width: '100%',\r\n        paddingHorizontal: '20%',\r\n        marginTop: -20,\r\n        marginBottom: -10,\r\n        flexDirection: 'column',\r\n    },\r\n    knownWordsPercText: {\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        fontSize: constants.H1FONTSIZE,\r\n        color: constants.PURPLEREGULAR,\r\n        marginBottom: 10,\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto'\r\n    },\r\n    exampleSentenceContainer: {\r\n        marginBottom: 10\r\n    },\r\n    exampleSentenceText: {\r\n        fontFamily: constants.FONTFAMILY,\r\n        fontSize: constants.H2FONTSIZE,\r\n        textAlign: 'center'\r\n    }\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}