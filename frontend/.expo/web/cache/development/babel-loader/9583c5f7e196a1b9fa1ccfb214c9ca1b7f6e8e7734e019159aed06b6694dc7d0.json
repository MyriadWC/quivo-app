{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport { useState, useEffect, useRef, useContext } from \"react\";\nimport * as Speech from 'expo-speech';\nimport UserContext from \"../../../contexts/UserContext\";\nimport * as constants from \"../../../constants\";\nimport client from \"../../../utils/axios\";\nimport { capitalizeFirstLetter } from \"../../../utils/text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar FrequencyBar = function FrequencyBar(_ref) {\n  var frequency_rank = _ref.frequency_rank;\n  var value = frequency_rank < 5000 ? Math.ceil(frequency_rank / 1000) : 5;\n  var labels = ['Very Common', 'Common', 'Less Common', 'Rare', 'Very Rare'];\n  var colors = ['#008000', '#ADFF2F', '#FFFF00O', '#FFA500', '#FF0000'];\n  return _jsxs(View, {\n    style: styles.frequencyBarContainer,\n    children: [_jsx(View, {\n      style: _objectSpread({\n        backgroundColor: colors[value - 1]\n      }, styles.frequencyBar)\n    }), _jsx(Text, {\n      style: styles.frequencyBarText,\n      children: labels[value - 1]\n    })]\n  });\n};\nexport default function Word(_ref2) {\n  var word = _ref2.word,\n    wordData = _ref2.wordData,\n    isFirstWord = _ref2.isFirstWord,\n    screenWidth = _ref2.screenWidth,\n    index = _ref2.index;\n  var _useContext = useContext(UserContext),\n    currentUser = _useContext.currentUser;\n  var wordRef = useRef(null);\n  var _useState = useState(wordData.user_knows ? constants.PRIMARYCOLOR : constants.BLACK),\n    _useState2 = _slicedToArray(_useState, 2),\n    textColor = _useState2[0],\n    setTextColor = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    lastPress = _useState4[0],\n    setLastPress = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    wordTranslationVisible = _useState6[0],\n    setWordTranslationVisible = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    pressedOnce = _useState8[0],\n    _setPressedOnce = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    wordWidth = _useState10[0],\n    setWordWidth = _useState10[1];\n  var _useState11 = useState(0),\n    _useState12 = _slicedToArray(_useState11, 2),\n    infoBoxXAdjust = _useState12[0],\n    setInfoBoxXAdjust = _useState12[1];\n  var infoBoxWidth = 300;\n  var pressedOnceRef = useRef(pressedOnce);\n  var setPressedOnce = function setPressedOnce(value) {\n    pressedOnceRef.current = value;\n    _setPressedOnce(value);\n  };\n  var calculateXPositionAdjust = function calculateXPositionAdjust(_ref3) {\n    var wordXCentroid = _ref3.wordXCentroid,\n      margin = _ref3.margin;\n    var halfInfoBoxWidth = infoBoxWidth / 2;\n    if (wordXCentroid + halfInfoBoxWidth + margin > screenWidth) {\n      return -(wordXCentroid + halfInfoBoxWidth - screenWidth) - margin;\n    } else if (wordXCentroid - halfInfoBoxWidth - margin < 0) {\n      return -(wordXCentroid - halfInfoBoxWidth) + margin;\n    }\n    return 0;\n  };\n  var tapDelayTimeout;\n  var definitionDisplayTimeout;\n  useEffect(function () {\n    var handle = findNodeHandle(wordRef.current);\n    UIManager.measure(handle, function (x, y, w, h, pageX, pageY) {\n      var wordXCentroid = pageX + w / 2;\n      setWordWidth(w);\n      setInfoBoxXAdjust(calculateXPositionAdjust({\n        wordXCentroid: wordXCentroid,\n        margin: 10\n      }));\n    });\n  }, []);\n  var handlePress = function handlePress() {\n    var currentTime = new Date().getTime();\n    if (currentTime - lastPress < constants.DOUBLETAPDELAY) {\n      client.post('api/users/' + currentUser.user_id + '/toggleknownword/' + wordData.word).then(function (res) {\n        console.log('word changed in database');\n      }).catch(function (e) {\n        console.log(e.response.data);\n      });\n      setTextColor(textColor === constants.BLACK ? constants.PRIMARYCOLOR : constants.BLACK);\n      setLastPress(0);\n      setPressedOnce(false);\n      setWordTranslationVisible(false);\n      clearTimeout(tapDelayTimeout);\n      clearTimeout(definitionDisplayTimeout);\n    } else {\n      setPressedOnce(true);\n      Speech.speak(wordData.word, {\n        language: 'fr'\n      });\n      tapDelayTimeout = setTimeout(function () {\n        if (pressedOnceRef.current) {\n          console.log(pressedOnce);\n          setWordTranslationVisible(true);\n        }\n        ;\n        setPressedOnce(false);\n      }, constants.DOUBLETAPDELAY);\n      definitionDisplayTimeout = setTimeout(function () {\n        setWordTranslationVisible(false);\n      }, constants.TRANSLATIONDISPLAYTIME);\n    }\n    setLastPress(currentTime);\n  };\n  return _jsxs(View, {\n    children: [_jsx(_Fragment, {\n      children: wordTranslationVisible && _jsxs(View, {\n        style: _objectSpread({\n          width: infoBoxWidth,\n          marginLeft: (wordWidth - infoBoxWidth) / 2 + infoBoxXAdjust\n        }, styles.infoBox),\n        children: [_jsxs(Text, {\n          style: styles.translationText,\n          children: [capitalizeFirstLetter(wordData.word), \" - Translation\"]\n        }), _jsx(FrequencyBar, {\n          frequency_rank: wordData.rank\n        })]\n      })\n    }), _jsx(TouchableOpacity, {\n      activeOpacity: 1,\n      onPress: function onPress() {\n        return handlePress();\n      },\n      children: _jsx(Text, {\n        style: _objectSpread(_objectSpread({}, styles.mainText), {}, {\n          color: textColor\n        }),\n        ref: wordRef,\n        children: isFirstWord ? capitalizeFirstLetter(word) : word\n      })\n    }, index)]\n  });\n}\n;\nvar styles = StyleSheet.create({\n  frequencyBarContainer: {\n    flexDirection: 'row'\n  },\n  frequencyBar: {\n    borderRadius: 5,\n    padding: 5,\n    marginRight: 5,\n    width: 20,\n    height: 20,\n    borderWidth: 2,\n    borderColor: constants.TERTIARYCOLOR\n  },\n  frequencyBarText: {\n    fontFamily: constants.FONTFAMILYBOLD,\n    color: constants.TERTIARYCOLOR,\n    fontSize: constants.CONTENTFONTSIZE\n  },\n  mainText: {\n    fontSize: constants.H1FONTSIZE,\n    fontFamily: constants.FONTFAMILYBOLD\n  },\n  infoBox: {\n    backgroundColor: constants.PRIMARYCOLOR,\n    height: 80,\n    borderRadius: 20,\n    paddingLeft: 10,\n    paddingRight: 10,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'absolute',\n    zIndex: 1,\n    top: -80\n  },\n  translationText: {\n    fontSize: constants.H1FONTSIZE - 8,\n    fontFamily: constants.FONTFAMILYBOLD,\n    color: constants.TERTIARYCOLOR,\n    marginBottom: 10\n  },\n  frequencyScoreText: {\n    fontSize: constants.H2FONTSIZE,\n    fontFamily: constants.FONTFAMILY,\n    color: constants.TERTIARYCOLOR\n  }\n});","map":{"version":3,"names":["useState","useEffect","useRef","useContext","Speech","UserContext","constants","client","capitalizeFirstLetter","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","FrequencyBar","_ref","frequency_rank","value","Math","ceil","labels","colors","View","style","styles","frequencyBarContainer","children","_objectSpread","backgroundColor","frequencyBar","Text","frequencyBarText","Word","_ref2","word","wordData","isFirstWord","screenWidth","index","_useContext","currentUser","wordRef","_useState","user_knows","PRIMARYCOLOR","BLACK","_useState2","_slicedToArray","textColor","setTextColor","_useState3","_useState4","lastPress","setLastPress","_useState5","_useState6","wordTranslationVisible","setWordTranslationVisible","_useState7","_useState8","pressedOnce","_setPressedOnce","_useState9","_useState10","wordWidth","setWordWidth","_useState11","_useState12","infoBoxXAdjust","setInfoBoxXAdjust","infoBoxWidth","pressedOnceRef","setPressedOnce","current","calculateXPositionAdjust","_ref3","wordXCentroid","margin","halfInfoBoxWidth","tapDelayTimeout","definitionDisplayTimeout","handle","findNodeHandle","UIManager","measure","x","y","w","h","pageX","pageY","handlePress","currentTime","Date","getTime","DOUBLETAPDELAY","post","user_id","then","res","console","log","catch","e","response","data","clearTimeout","speak","language","setTimeout","TRANSLATIONDISPLAYTIME","width","marginLeft","infoBox","translationText","rank","TouchableOpacity","activeOpacity","onPress","mainText","color","ref","StyleSheet","create","flexDirection","borderRadius","padding","marginRight","height","borderWidth","borderColor","TERTIARYCOLOR","fontFamily","FONTFAMILYBOLD","fontSize","CONTENTFONTSIZE","H1FONTSIZE","paddingLeft","paddingRight","justifyContent","alignItems","position","zIndex","top","marginBottom","frequencyScoreText","H2FONTSIZE","FONTFAMILY"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/screens/LearnScreen/components/Word.tsx"],"sourcesContent":["import { StyleSheet, View, SafeAreaView, Text, TouchableOpacity, findNodeHandle, UIManager } from \"react-native\";\r\nimport { useState, useEffect, useRef, useContext } from \"react\";\r\nimport * as Speech from 'expo-speech';\r\nimport UserContext from '../../../contexts/UserContext';\r\nimport * as constants from \"../../../constants\";\r\nimport client from \"../../../utils/axios\";\r\nimport { capitalizeFirstLetter } from \"../../../utils/text\";\r\n\r\ninterface IFrequencyBar {\r\n    frequency_rank: number\r\n}\r\n\r\nconst FrequencyBar = ({ frequency_rank }:IFrequencyBar) => {\r\n    \r\n    // Assign frequency score between 1 and 5\r\n    let value = frequency_rank < 5000 ? Math.ceil(frequency_rank/1000) : 5\r\n    let labels = ['Very Common', 'Common', 'Less Common', 'Rare', 'Very Rare']\r\n    let colors = ['#008000', '#ADFF2F', '#FFFF00O', '#FFA500', '#FF0000']\r\n\r\n    return (\r\n        <View style={styles.frequencyBarContainer}>\r\n            <View style={{backgroundColor: colors[value - 1], ...styles.frequencyBar}}></View>\r\n            <Text style={styles.frequencyBarText}>{labels[value - 1]}</Text>\r\n        </View>\r\n    );\r\n}\r\n\r\ninterface IWordProps {\r\n    word: string;\r\n    wordData: object;\r\n    isFirstWord: boolean;\r\n    screenWidth: number,\r\n    index: number;\r\n}\r\nexport default function Word ({word, wordData, isFirstWord, screenWidth, index}: IWordProps) {\r\n\r\n    const { currentUser } = useContext(UserContext);\r\n    const wordRef = useRef(null);\r\n    \r\n    const [textColor, setTextColor] = useState(wordData.user_knows ? constants.PRIMARYCOLOR : constants.BLACK);\r\n    // Temps écoulé depuis la dérnière fois qu'on a tapé sur le mot\r\n    // Initialiser à 0 millisecondes. Trouver une meilleure solution qui necessite moins\r\n    // de variables\r\n    const [lastPress, setLastPress] = useState(0);\r\n    const [wordTranslationVisible, setWordTranslationVisible] = useState(false);\r\n\r\n    const [pressedOnce, _setPressedOnce] = useState(false);\r\n\r\n    // Horizontal osition of word on the screen\r\n    //const [xCoord, setXCoord] = useState(0);\r\n    const [wordWidth, setWordWidth] = useState(0);\r\n    //const [wordXCentroid, setWordXCentroid] = useState(0);\r\n    const [infoBoxXAdjust,  setInfoBoxXAdjust] = useState(0);\r\n\r\n    let infoBoxWidth = 300;\r\n\r\n    // This seems like a ridiculously convoluted approach but it's the only\r\n    // way I could find to achieve this behaviour using react's conventions\r\n    const pressedOnceRef = useRef(pressedOnce);\r\n\r\n    const setPressedOnce = (value) => {\r\n      pressedOnceRef.current = value;\r\n      _setPressedOnce(value);\r\n    };\r\n\r\n    interface ICalculateXPositionAdjust {\r\n        wordXCentroid: number,\r\n        margin: number\r\n    }\r\n    const calculateXPositionAdjust = ({ wordXCentroid, margin }: ICalculateXPositionAdjust) => {\r\n        //Amount X coordinate of info box should be adjusted to ensure it stays on the screen\r\n\r\n        const halfInfoBoxWidth = infoBoxWidth / 2;\r\n\r\n        if (wordXCentroid + halfInfoBoxWidth + margin > screenWidth) {\r\n            return -((wordXCentroid + halfInfoBoxWidth) - screenWidth) - margin;\r\n\r\n        } else if (wordXCentroid - halfInfoBoxWidth - margin < 0) {\r\n            return -(wordXCentroid - halfInfoBoxWidth) + margin;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // setTimeout rend un identifiant numérique unique\r\n    let tapDelayTimeout;\r\n    let definitionDisplayTimeout;\r\n\r\n    useEffect(() => {\r\n        const handle = findNodeHandle(wordRef.current);\r\n        UIManager.measure(handle, (x, y, w, h, pageX, pageY) => {\r\n            const wordXCentroid = pageX + (w / 2);\r\n            setWordWidth(w);\r\n            setInfoBoxXAdjust(calculateXPositionAdjust({ wordXCentroid: wordXCentroid, margin: 10 }));\r\n        });\r\n    }, []);\r\n  \r\n    const handlePress = () => {\r\n\r\n        const currentTime = new Date().getTime();\r\n\r\n        // L'utilisateur a tapé deux fois\r\n        if (currentTime - lastPress < constants.DOUBLETAPDELAY) {\r\n            \r\n            client.post(\r\n                'api/users/' + currentUser.user_id + '/toggleknownword/' + wordData.word\r\n            ).then(function(res) {  \r\n                console.log('word changed in database');\r\n            }).catch(function(e) {\r\n                console.log(e.response.data)\r\n            });\r\n            \r\n            // Basculer entre deux couleurs selon si le mot a déjà été ajouté au dictionnaire\r\n            setTextColor(textColor === constants.BLACK ? constants.PRIMARYCOLOR : constants.BLACK);\r\n\r\n            setLastPress(0);\r\n            setPressedOnce(false);\r\n            setWordTranslationVisible(false);\r\n\r\n            // Supprimer les timeOut q'on a initialisés lors de la première tape pour ne\r\n            // plus afficher la traduction\r\n            clearTimeout(tapDelayTimeout);\r\n            clearTimeout(definitionDisplayTimeout);\r\n\r\n        } else { // C'est la première fois que l'utilisateur a tapé le mot\r\n\r\n            // Le timeOut attend la fin de la fenêtre où l'utilisateur pourrait taper une deuxième fois\r\n            // avant d'fficher la traduction pendant la période choisie.\r\n            setPressedOnce(true);\r\n\r\n            // WordData.word contains the full word\r\n            Speech.speak(wordData.word, {language: 'fr'})\r\n            \r\n            tapDelayTimeout = setTimeout(() => {\r\n\r\n                // Si l'utilisateur a tape deux fois le timeout lastPress sera remis a zero au moment que\r\n                // ce timeout va s'activer, et pressedOnce sera faux. Dans ce cas, on ne veut plus afficher\r\n                // la traduction\r\n                if (pressedOnceRef.current) {\r\n                    console.log(pressedOnce);\r\n                    setWordTranslationVisible(true);\r\n                };\r\n\r\n                setPressedOnce(false);\r\n\r\n            }, constants.DOUBLETAPDELAY);\r\n\r\n            // setTimeout n'empêche pas la prochaine partie du code de s'éxécuter pendant le temps\r\n            // d'attente, même si javascript n'utilise q'un seul thread\r\n            definitionDisplayTimeout = setTimeout(() => {\r\n                setWordTranslationVisible(false);\r\n            }, constants.TRANSLATIONDISPLAYTIME);\r\n\r\n        }\r\n\r\n        setLastPress(currentTime);\r\n\r\n    };\r\n  \r\n    return (\r\n        <View>\r\n            <>\r\n            {wordTranslationVisible && (\r\n                <View style={{width: infoBoxWidth, marginLeft: (wordWidth-infoBoxWidth)/2 + infoBoxXAdjust, ...styles.infoBox}}>\r\n                    <Text style={styles.translationText}>{capitalizeFirstLetter(wordData.word)} - Translation</Text>\r\n                    <FrequencyBar frequency_rank={wordData.rank}></FrequencyBar>\r\n                </View>\r\n            )}\r\n            </>\r\n            <TouchableOpacity activeOpacity={1} key={index} onPress={() => handlePress()}>\r\n                <Text\r\n                    style={{...styles.mainText, color: textColor}}\r\n                    ref={wordRef}\r\n                    >\r\n                    {isFirstWord ? capitalizeFirstLetter(word) : word}\r\n                </Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n  };\r\n\r\n  const styles= StyleSheet.create({\r\n\r\n    // FrequencyBar\r\n    frequencyBarContainer: {\r\n        flexDirection: 'row'\r\n    },\r\n    frequencyBar: {\r\n        borderRadius: 5,\r\n        padding: 5,\r\n        marginRight: 5,\r\n        width: 20,\r\n        height: 20,\r\n        borderWidth: 2,\r\n        borderColor: constants.TERTIARYCOLOR\r\n    },\r\n    frequencyBarText: {\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        color: constants.TERTIARYCOLOR,\r\n        fontSize: constants.CONTENTFONTSIZE\r\n    },\r\n    \r\n    // Word\r\n    mainText: {\r\n        fontSize: constants.H1FONTSIZE,\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        //textAlign: \"center\"\r\n    },\r\n    infoBox: {\r\n        backgroundColor: constants.PRIMARYCOLOR,\r\n        height: 80,\r\n        borderRadius: 20,\r\n        paddingLeft: 10,\r\n        paddingRight: 10,\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        top: -80\r\n    },\r\n    translationText: {\r\n        fontSize: constants.H1FONTSIZE - 8,\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        color: constants.TERTIARYCOLOR,\r\n        marginBottom: 10\r\n    },\r\n    frequencyScoreText: {\r\n        fontSize: constants.H2FONTSIZE,\r\n        fontFamily: constants.FONTFAMILY,\r\n        color: constants.TERTIARYCOLOR\r\n    }\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}