{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useContext } from \"react\";\nimport UserContext from \"../contexts/UserContext\";\nimport * as constants from \"../constants\";\nimport { LineChart } from \"react-native-chart-kit\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n  var getComprehensionPercentage = function getComprehensionPercentage(known_words) {\n    return Math.round(-100 + 200 / (1 + Math.E ** (-0.001 * known_words)));\n  };\n  var _useContext = useContext(UserContext),\n    currentUser = _useContext.currentUser,\n    setCurrentUser = _useContext.setCurrentUser;\n  var labels = [0, 10000];\n  var data = Array.from({\n    length: 101\n  }, function (_, i) {\n    return getComprehensionPercentage(i * 100);\n  });\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxs(Text, {\n      style: styles.header,\n      children: [currentUser.username, \" Stats\"]\n    }), _jsxs(View, {\n      style: {\n        width: '100%'\n      },\n      children: [_jsxs(Text, {\n        style: styles.wordsLearnedTitle,\n        children: [currentUser.known_words_count, \" Words Learned\"]\n      }), _jsx(LineChart, {\n        data: {\n          labels: labels,\n          datasets: [{\n            data: data\n          }]\n        },\n        width: Dimensions.get(\"window\").width - 60,\n        height: 200,\n        yAxisSuffix: \"%\",\n        yAxisInterval: 25,\n        chartConfig: {\n          backgroundColor: constants.PRIMARYCOLOR,\n          backgroundGradientFrom: constants.PRIMARYCOLOR,\n          backgroundGradientTo: constants.PRIMARYCOLOR,\n          decimalPlaces: 0,\n          color: function color() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n            return `rgba(255, 255, 255, ${opacity})`;\n          },\n          labelColor: function labelColor() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n            return `rgba(255, 255, 255, ${opacity})`;\n          },\n          style: {\n            borderRadius: 10\n          },\n          propsForDots: {\n            r: \"0\",\n            strokeWidth: \"2\",\n            stroke: constants.TERTIARYCOLOR\n          }\n        },\n        bezier: true,\n        style: {\n          borderRadius: 10\n        }\n      }), _jsxs(Text, {\n        style: styles.wordsLearnedInfo,\n        children: [\"This means you should be able to understand \", getComprehensionPercentage(currentUser.known_words_count), \"% of written text.\"]\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    padding: 10,\n    margin: 20,\n    flex: 1\n  },\n  header: {\n    textTransform: 'capitalize',\n    fontSize: 20,\n    marginTop: 20,\n    marginBottom: 20,\n    fontWeight: \"bold\"\n  },\n  wordsLearnedTitle: {\n    fontSize: constants.CONTENTFONTSIZE,\n    fontFamily: constants.FONTFAMILYBOLD,\n    marginBottom: 10\n  },\n  wordsLearnedInfo: {\n    fontSize: constants.CONTENTFONTSIZE,\n    fontFamily: constants.FONTFAMILY,\n    marginTop: 10\n  }\n});","map":{"version":3,"names":["useContext","UserContext","constants","LineChart","jsxs","_jsxs","jsx","_jsx","HomeScreen","_ref","navigation","getComprehensionPercentage","known_words","Math","round","E","_useContext","currentUser","setCurrentUser","labels","data","Array","from","length","_","i","SafeAreaView","style","styles","container","children","Text","header","username","View","width","wordsLearnedTitle","known_words_count","datasets","Dimensions","get","height","yAxisSuffix","yAxisInterval","chartConfig","backgroundColor","PRIMARYCOLOR","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","arguments","undefined","labelColor","borderRadius","propsForDots","r","strokeWidth","stroke","TERTIARYCOLOR","bezier","wordsLearnedInfo","StyleSheet","create","padding","margin","flex","textTransform","fontSize","marginTop","marginBottom","fontWeight","CONTENTFONTSIZE","fontFamily","FONTFAMILYBOLD","FONTFAMILY"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/screens/HomeScreen.tsx"],"sourcesContent":["import { View, SafeAreaView, Text, StyleSheet, Dimensions } from \"react-native\";\r\nimport { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { useContext } from \"react\";\r\nimport UserContext from '../contexts/UserContext';\r\nimport * as constants from '../constants';\r\nimport { useWorkouts } from \"../hooks/useWorkouts\";\r\nimport { LineChart } from \"react-native-chart-kit\";\r\n\r\nexport default function HomeScreen({navigation}: NativeStackHeaderProps) {\r\n\r\n    const getComprehensionPercentage = (known_words: number) => {\r\n        /* Returns the percentage of text a user should understand based\r\n        on the number of words they know. This will need to be found\r\n        by fitting a curve to the cumulative word counts starting at\r\n        the most frequent word and going to the least frequent. I\r\n        don't have this yet but it should look something like the\r\n        function returned here */\r\n        return Math.round(-100 + 200/(1 + Math.E**(-0.001 * known_words)))\r\n    }\r\n    \r\n    //Not sure if you can import hook setters like this but it didn't seem to work\r\n    const { currentUser, setCurrentUser } = useContext(UserContext);\r\n\r\n    //let labels = Array.from({ length: 10 }, (_, i) => i * 1000);\r\n    let labels = [0, 10000];\r\n    //labels = labels.map((label, index) => index % 10 === 0 ? label : '');\r\n\r\n    let data = Array.from({ length: 101 }, (_, i) => getComprehensionPercentage(i * 100));\r\n\r\n    return (\r\n        <SafeAreaView style={styles.container}>\r\n            <Text style={styles.header}>{currentUser.username} Stats</Text>\r\n            <View style={{width: '100%'}}>\r\n                <Text style={styles.wordsLearnedTitle}>{ currentUser.known_words_count } Words Learned</Text>\r\n                <LineChart\r\n                    data={{\r\n                    labels: labels,\r\n                    datasets: [{ data: data }]}}\r\n                    width={Dimensions.get(\"window\").width - 60} // from react-native\r\n                    height={200}\r\n                    //yAxisLabel=\"$\"\r\n                    yAxisSuffix=\"%\"\r\n                    yAxisInterval={25} // optional, defaults to 1\r\n                    chartConfig={{\r\n                    backgroundColor: constants.PRIMARYCOLOR,//\"#e26a00\",\r\n                    backgroundGradientFrom: constants.PRIMARYCOLOR,//\"#fb8c00\",\r\n                    backgroundGradientTo: constants.PRIMARYCOLOR,//\"#ffa726\",\r\n                    decimalPlaces: 0, // optional, defaults to 2dp\r\n                    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n                    labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n                    style: {\r\n                        borderRadius: 10\r\n                    },\r\n                    propsForDots: {\r\n                        r: \"0\",\r\n                        strokeWidth: \"2\",\r\n                        stroke: constants.TERTIARYCOLOR//\"#ffa726\"\r\n                    }\r\n                    }}\r\n                    bezier\r\n                    style={{\r\n                    //marginVertical: 8,\r\n                    borderRadius: 10\r\n                    }}\r\n                />\r\n                <Text style={styles.wordsLearnedInfo}>This means you should be able to understand {getComprehensionPercentage(currentUser.known_words_count)}% of written text.</Text>\r\n            </View>\r\n        </SafeAreaView>\r\n    )\r\n }\r\n\r\n        const styles = StyleSheet.create({\r\n            container: {\r\n                padding: 10,\r\n                margin:20,\r\n                flex: 1\r\n            },\r\n            header: {\r\n                textTransform: 'capitalize',\r\n                fontSize: 20,\r\n                marginTop: 20,\r\n                marginBottom: 20,\r\n                fontWeight: \"bold\",\r\n            },\r\n            wordsLearnedTitle: {\r\n                fontSize: constants.CONTENTFONTSIZE,\r\n                fontFamily: constants.FONTFAMILYBOLD,\r\n                marginBottom: 10\r\n            },\r\n            wordsLearnedInfo: {\r\n                fontSize: constants.CONTENTFONTSIZE,\r\n                fontFamily: constants.FONTFAMILY,\r\n                marginTop: 10\r\n            }\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}