{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport * as constants from \"../constants\";\naxios.defaults.withCredentials = true;\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\nexport function updateClientCsrfToken() {\n  return _updateClientCsrfToken.apply(this, arguments);\n}\nfunction _updateClientCsrfToken() {\n  _updateClientCsrfToken = _asyncToGenerator(function* () {\n    var csrfToken = null;\n    try {\n      var response = yield axios.get(constants.HOST_ADDRESS + ':8000/api/csrf');\n      csrfToken = response.data.csrfToken;\n      axios.defaults.headers.common['X-CSRFToken'] = csrfToken;\n    } catch (error) {\n      console.error(error);\n    }\n    client.defaults.headers.common['X-CSRFToken'] = csrfToken;\n  });\n  return _updateClientCsrfToken.apply(this, arguments);\n}\nvar client = axios.create({\n  baseURL: constants.HOST_ADDRESS + \":8000\"\n});\nupdateClientCsrfToken();\nexport default client;","map":{"version":3,"names":["axios","constants","defaults","withCredentials","xsrfCookieName","xsrfHeaderName","updateClientCsrfToken","_updateClientCsrfToken","apply","arguments","_asyncToGenerator","csrfToken","response","get","HOST_ADDRESS","data","headers","common","error","console","client","create","baseURL"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/utils/axios.ts"],"sourcesContent":["import axios from 'axios';\r\nimport * as constants from '../constants';\r\n\r\n// CSRF not necessary since api only being used for mobile\r\n// app, and CSRF protects against browser attacks but\r\n// I might create a website in the future so I'll keep it\r\n// in for now\r\naxios.defaults.withCredentials = true;\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\r\n\r\n// Fetch CSRF token and set default csrf header for all post requests\r\n// Need to wait for promise to be resolved so use async/await\r\nexport async function updateClientCsrfToken() {\r\n\r\n  let csrfToken = null;\r\n\r\n  try {\r\n    const response = await axios.get(constants.HOST_ADDRESS + ':8000/api/csrf');\r\n    csrfToken = response.data.csrfToken;\r\n    axios.defaults.headers.common['X-CSRFToken'] = csrfToken;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n\r\n  //return csrfToken;\r\n  client.defaults.headers.common['X-CSRFToken'] = csrfToken;\r\n\r\n}\r\n\r\nconst client = axios.create({\r\n  baseURL: constants.HOST_ADDRESS + \":8000\"\r\n});\r\n\r\nupdateClientCsrfToken();\r\n  \r\n\r\n//fetchCsrfToken().then(csrfToken => {\r\n//  client.defaults.headers.common['X-CSRFToken'] = csrfToken;\r\n//});\r\n\r\nexport default client;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,SAAS;AAMrBD,KAAK,CAACE,QAAQ,CAACC,eAAe,GAAG,IAAI;AACrCH,KAAK,CAACE,QAAQ,CAACE,cAAc,GAAG,WAAW;AAC3CJ,KAAK,CAACE,QAAQ,CAACG,cAAc,GAAG,aAAa;AAI7C,gBAAsBC,qBAAqBA,CAAA;EAAA,OAAAC,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAe1C,SAAAF,uBAAA;EAAAA,sBAAA,GAAAG,iBAAA,CAfM,aAAuC;IAE5C,IAAIC,SAAS,GAAG,IAAI;IAEpB,IAAI;MACF,IAAMC,QAAQ,SAASZ,KAAK,CAACa,GAAG,CAACZ,SAAS,CAACa,YAAY,GAAG,gBAAgB,CAAC;MAC3EH,SAAS,GAAGC,QAAQ,CAACG,IAAI,CAACJ,SAAS;MACnCX,KAAK,CAACE,QAAQ,CAACc,OAAO,CAACC,MAAM,CAAC,aAAa,CAAC,GAAGN,SAAS;IAC1D,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;IAGAE,MAAM,CAAClB,QAAQ,CAACc,OAAO,CAACC,MAAM,CAAC,aAAa,CAAC,GAAGN,SAAS;EAE3D,CAAC;EAAA,OAAAJ,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,IAAMW,MAAM,GAAGpB,KAAK,CAACqB,MAAM,CAAC;EAC1BC,OAAO,EAAErB,SAAS,CAACa,YAAY,GAAG;AACpC,CAAC,CAAC;AAEFR,qBAAqB,CAAC,CAAC;AAOvB,eAAec,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}