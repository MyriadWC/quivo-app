{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport { AuthNavigation, Navigation } from \"./navigation/index\";\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { AuthProvider } from \"./contexts/UserContext\";\nimport UserContext from \"./contexts/UserContext\";\nimport * as Font from 'expo-font';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar customFonts = {\n  'Nunito': require(\"./assets/fonts/Nunito-Regular.ttf\")\n};\nfunction UserComponent() {\n  var _useContext = useContext(UserContext),\n    currentUser = _useContext.currentUser;\n  return currentUser ? _jsx(Navigation, {}) : _jsx(AuthNavigation, {});\n}\nexport default function App() {\n  var isLoaded = useCachedResources();\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    fontsLoaded = _useState2[0],\n    setFontsLoaded = _useState2[1];\n  useEffect(function () {\n    function loadFonts() {\n      return _loadFonts.apply(this, arguments);\n    }\n    function _loadFonts() {\n      _loadFonts = _asyncToGenerator(function* () {\n        yield Font.loadAsync({\n          'Nunito': require(\"./assets/fonts/Nunito-Regular.ttf\"),\n          'Nunito Bold': require(\"./assets/fonts/Nunito-Bold.ttf\")\n        });\n        setFontsLoaded(true);\n      });\n      return _loadFonts.apply(this, arguments);\n    }\n    loadFonts();\n  }, []);\n  if (!isLoaded || !fontsLoaded) {\n    console.log('font not loaded');\n    return null;\n  }\n  return _jsxs(AuthProvider, {\n    children: [_jsx(StatusBar, {\n      style: \"auto\"\n    }), _jsx(UserComponent, {})]\n  });\n}","map":{"version":3,"names":["StatusBar","AuthNavigation","Navigation","useCachedResources","React","useState","useEffect","useContext","AuthProvider","UserContext","Font","jsx","_jsx","jsxs","_jsxs","customFonts","require","UserComponent","_useContext","currentUser","App","isLoaded","_useState","_useState2","_slicedToArray","fontsLoaded","setFontsLoaded","loadFonts","_loadFonts","apply","arguments","_asyncToGenerator","loadAsync","console","log","children","style"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/App.tsx"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport { AuthNavigation, Navigation } from './navigation/index';\r\nimport useCachedResources from \"./hooks/useCachedResources\"\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { AuthProvider } from './contexts/UserContext';\r\nimport UserContext from './contexts/UserContext';\r\nimport * as Font from 'expo-font';\r\nimport { useFonts } from 'expo-font';\r\n\r\nlet customFonts = {\r\n  'Nunito': require('./assets/fonts/Nunito-Regular.ttf')\r\n};\r\n\r\nfunction UserComponent() {\r\n\r\n  const { currentUser } = useContext(UserContext);\r\n\r\n  /*if (currentUser) {\r\n      // Take no known languages as a proxy for first login\r\n      if (currentUser.known_languages.length === 0) {\r\n          return <FirstLoginScreen />\r\n      }\r\n      return <Navigation />\r\n  } else {\r\n    return <AuthNavigation />\r\n  }\r\n  */\r\n\r\n  return currentUser ? <Navigation /> : <AuthNavigation />;\r\n}\r\n\r\nexport default function App() {\r\n  const isLoaded = useCachedResources();\r\n  //const fontsLoaded = useFonts(customFonts);\r\n  const [fontsLoaded, setFontsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function loadFonts() {\r\n      await Font.loadAsync({\r\n        'Nunito': require('./assets/fonts/Nunito-Regular.ttf'),\r\n        'Nunito Bold': require('./assets/fonts/Nunito-Bold.ttf'),\r\n      });\r\n      setFontsLoaded(true);\r\n    }\r\n\r\n    loadFonts();\r\n  }, []);\r\n\r\n  if (!isLoaded || !fontsLoaded) {\r\n    console.log('font not loaded');\r\n    return null; // or a loading spinner\r\n  }\r\n\r\n  //Font.loadAsync({\r\n  //  'Nunito': require('./assets/fonts/Nunito-Regular.ttf'),\r\n  //});\r\n\r\n  return (\r\n    <AuthProvider>\r\n      <StatusBar style=\"auto\" />\r\n      <UserComponent />\r\n    </AuthProvider>\r\n  );\r\n\r\n}"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,cAAc,EAAEC,UAAU;AACnC,OAAOC,kBAAkB;AACzB,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,YAAY;AACrB,OAAOC,WAAW;AAClB,OAAO,KAAKC,IAAI,MAAM,WAAW;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGlC,IAAIC,WAAW,GAAG;EAChB,QAAQ,EAAEC,OAAO,oCAAoC;AACvD,CAAC;AAED,SAASC,aAAaA,CAAA,EAAG;EAEvB,IAAAC,WAAA,GAAwBX,UAAU,CAACE,WAAW,CAAC;IAAvCU,WAAW,GAAAD,WAAA,CAAXC,WAAW;EAanB,OAAOA,WAAW,GAAGP,IAAA,CAACV,UAAU,IAAE,CAAC,GAAGU,IAAA,CAACX,cAAc,IAAE,CAAC;AAC1D;AAEA,eAAe,SAASmB,GAAGA,CAAA,EAAG;EAC5B,IAAMC,QAAQ,GAAGlB,kBAAkB,CAAC,CAAC;EAErC,IAAAmB,SAAA,GAAsCjB,QAAQ,CAAC,KAAK,CAAC;IAAAkB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA9CG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAElCjB,SAAS,CAAC,YAAM;IAAA,SACCqB,SAASA,CAAA;MAAA,OAAAC,UAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IAAA,SAAAF,WAAA;MAAAA,UAAA,GAAAG,iBAAA,CAAxB,aAA2B;QACzB,MAAMrB,IAAI,CAACsB,SAAS,CAAC;UACnB,QAAQ,EAAEhB,OAAO,oCAAoC,CAAC;UACtD,aAAa,EAAEA,OAAO,iCAAiC;QACzD,CAAC,CAAC;QACFU,cAAc,CAAC,IAAI,CAAC;MACtB,CAAC;MAAA,OAAAE,UAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IAEDH,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACN,QAAQ,IAAI,CAACI,WAAW,EAAE;IAC7BQ,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9B,OAAO,IAAI;EACb;EAMA,OACEpB,KAAA,CAACN,YAAY;IAAA2B,QAAA,GACXvB,IAAA,CAACZ,SAAS;MAACoC,KAAK,EAAC;IAAM,CAAE,CAAC,EAC1BxB,IAAA,CAACK,aAAa,IAAE,CAAC;EAAA,CACL,CAAC;AAGnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}