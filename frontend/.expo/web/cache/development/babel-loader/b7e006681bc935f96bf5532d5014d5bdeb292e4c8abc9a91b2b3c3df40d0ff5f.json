{"ast":null,"code":"import * as Speech from \"expo-speech\";\nexport var capitalizeFirstLetter = function capitalizeFirstLetter(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n};\nexport var speak = function speak(sentence, language_code, narration_speed) {\n  Speech.stop();\n  Speech.speak(sentence, {\n    language: language_code,\n    rate: narration_speed\n  });\n};\nexport function splitSentence(sentence, languageCode) {\n  var regex = {\n    'fr': /[Aa]ujourd'hui|[Pp]resqu'île|[Qq]uelqu'un|[Dd]'accord|[a-zA-ZéèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+/g,\n    'de': /[a-zA-ZäöüÄÖÜß]+/g,\n    'ru': /[А-Яа-яЁё]+/g\n  }[languageCode];\n  var shortenedWordMap = {\n    'j': 'je',\n    'l': 'le',\n    't': 'tu',\n    'd': 'de',\n    'c': 'ce',\n    's': 'se',\n    'qu': 'que',\n    'm': 'me',\n    'n': 'ne'\n  };\n  var words = sentence.match(regex);\n  words = words.map(function (word) {\n    return word.toLowerCase();\n  });\n  if (languageCode == 'fr') {\n    words = words.map(function (word) {\n      return shortenedWordMap[word] || word;\n    });\n  }\n  console.log(words);\n  return words;\n}","map":{"version":3,"names":["Speech","capitalizeFirstLetter","word","charAt","toUpperCase","slice","speak","sentence","language_code","narration_speed","stop","language","rate","splitSentence","languageCode","regex","shortenedWordMap","words","match","map","toLowerCase","console","log"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/utils/text.ts"],"sourcesContent":["import * as Speech from \"expo-speech\";\r\n\r\nexport const capitalizeFirstLetter = (word: string) => {\r\n    return word.charAt(0).toUpperCase() + word.slice(1);\r\n    }\r\n\r\nexport const speak = (sentence: string, language_code: string, narration_speed: number) => {\r\n    Speech.stop();\r\n    Speech.speak(\r\n        sentence,\r\n        {\r\n            language: language_code,\r\n            rate: narration_speed\r\n        }\r\n    );\r\n};\r\n\r\nexport function splitSentence(sentence: string, languageCode: string) {\r\n// Based on the python version in MLNotebooks  \r\n\r\n    const regex: Record<string, string> = {\r\n        'fr': /[Aa]ujourd'hui|[Pp]resqu'île|[Qq]uelqu'un|[Dd]'accord|[a-zA-ZéèêëÉÈÊËàâäÀÂÄôöÔÖûüùÛÜÙçÇîÎïÏ]+/g,\r\n        'de': /[a-zA-ZäöüÄÖÜß]+/g,\r\n        'ru': /[А-Яа-яЁё]+/g\r\n        }[languageCode]\r\n\r\n    const shortenedWordMap: Record<string, string> = {\r\n        'j': 'je',\r\n        'l': 'le',\r\n        't': 'tu',\r\n        'd': 'de',\r\n        'c': 'ce',\r\n        's': 'se',\r\n        'qu': 'que',\r\n        'm': 'me',\r\n        'n': 'ne',\r\n        }    \r\n\r\n    // Split all words in the sentence by word boundaries (Split uninclusively at punctuation or non-alphanumeric characters)\r\n    let words = sentence.match(regex);\r\n    // Set all words to lowercase\r\n    words = words.map(word => word.toLowerCase());\r\n\r\n    // Replace any shortened word with their full-length equivalent\r\n    if (languageCode == 'fr') {\r\n        words = words.map(word => shortenedWordMap[word] || word);\r\n    }\r\n\r\n    console.log(words);\r\n\r\n    return words;\r\n}"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,aAAa;AAErC,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,IAAY,EAAK;EACnD,OAAOA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC;AACnD,CAAC;AAEL,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAIC,QAAgB,EAAEC,aAAqB,EAAEC,eAAuB,EAAK;EACvFT,MAAM,CAACU,IAAI,CAAC,CAAC;EACbV,MAAM,CAACM,KAAK,CACRC,QAAQ,EACR;IACII,QAAQ,EAAEH,aAAa;IACvBI,IAAI,EAAEH;EACV,CACJ,CAAC;AACL,CAAC;AAED,OAAO,SAASI,aAAaA,CAACN,QAAgB,EAAEO,YAAoB,EAAE;EAGlE,IAAMC,KAA6B,GAAG;IAClC,IAAI,EAAE,gGAAgG;IACtG,IAAI,EAAE,mBAAmB;IACzB,IAAI,EAAE;EACN,CAAC,CAACD,YAAY,CAAC;EAEnB,IAAME,gBAAwC,GAAG;IAC7C,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,IAAI;IACT,GAAG,EAAE,IAAI;IACT,IAAI,EAAE,KAAK;IACX,GAAG,EAAE,IAAI;IACT,GAAG,EAAE;EACL,CAAC;EAGL,IAAIC,KAAK,GAAGV,QAAQ,CAACW,KAAK,CAACH,KAAK,CAAC;EAEjCE,KAAK,GAAGA,KAAK,CAACE,GAAG,CAAC,UAAAjB,IAAI;IAAA,OAAIA,IAAI,CAACkB,WAAW,CAAC,CAAC;EAAA,EAAC;EAG7C,IAAIN,YAAY,IAAI,IAAI,EAAE;IACtBG,KAAK,GAAGA,KAAK,CAACE,GAAG,CAAC,UAAAjB,IAAI;MAAA,OAAIc,gBAAgB,CAACd,IAAI,CAAC,IAAIA,IAAI;IAAA,EAAC;EAC7D;EAEAmB,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;EAElB,OAAOA,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}