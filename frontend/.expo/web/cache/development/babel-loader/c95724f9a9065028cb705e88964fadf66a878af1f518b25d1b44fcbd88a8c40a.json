{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport client from '../../../utils/axios';\nexport default function useFetchWordsData(currentItem) {\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    wordsData = _useState2[0],\n    setWordsData = _useState2[1];\n  useEffect(function () {\n    if (currentItem) {\n      fetchWordsData().then(function (wordsData) {\n        setWordsData(wordsData);\n      });\n    }\n  }, [currentItem]);\n  var fetchWordsData = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var res = yield client.post('./api/words', {\n          words: currentItem.words,\n          withCredentials: true\n        });\n        return res.data;\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    return function fetchWordsData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return {\n    wordsData: wordsData\n  };\n}","map":{"version":3,"names":["useEffect","useState","client","useFetchWordsData","currentItem","_useState","_useState2","_slicedToArray","wordsData","setWordsData","fetchWordsData","then","_ref","_asyncToGenerator","res","post","words","withCredentials","data","error","console","apply","arguments"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/screens/LearnScreen/hooks/useFetchWordsData.ts"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\r\n// Utils\r\nimport client from '../../../utils/axios';\r\nimport { speak } from '../../../utils/text';\r\n// Contexts\r\nimport UserContext from \"../../../contexts/UserContext\";\r\n\r\nexport default function useFetchWordsData(currentItem){\r\n\r\n    const [wordsData, setWordsData] = useState();\r\n\r\n    useEffect(() => {\r\n        if (currentItem) {\r\n            fetchWordsData().then((wordsData) => {\r\n                setWordsData(wordsData);\r\n            });\r\n        }\r\n    }, [currentItem]);\r\n\r\n    const fetchWordsData = async() => {\r\n        try {\r\n            const res = await client.post('./api/words', {\r\n                words: currentItem.words,\r\n                withCredentials: true\r\n            });\r\n            return res.data\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    return { wordsData };\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAoB,OAAO;AAEvD,OAAOC,MAAM,MAAM,sBAAsB;AAKzC,eAAe,SAASC,iBAAiBA,CAACC,WAAW,EAAC;EAElD,IAAAC,SAAA,GAAkCJ,QAAQ,CAAC,CAAC;IAAAK,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAE9BN,SAAS,CAAC,YAAM;IACZ,IAAII,WAAW,EAAE;MACbM,cAAc,CAAC,CAAC,CAACC,IAAI,CAAC,UAACH,SAAS,EAAK;QACjCC,YAAY,CAACD,SAAS,CAAC;MAC3B,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACJ,WAAW,CAAC,CAAC;EAEjB,IAAMM,cAAc;IAAA,IAAAE,IAAA,GAAAC,iBAAA,CAAG,aAAW;MAC9B,IAAI;QACA,IAAMC,GAAG,SAASZ,MAAM,CAACa,IAAI,CAAC,aAAa,EAAE;UACzCC,KAAK,EAAEZ,WAAW,CAACY,KAAK;UACxBC,eAAe,EAAE;QACrB,CAAC,CAAC;QACF,OAAOH,GAAG,CAACI,IAAI;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACxB;IACJ,CAAC;IAAA,gBAVKT,cAAcA,CAAA;MAAA,OAAAE,IAAA,CAAAS,KAAA,OAAAC,SAAA;IAAA;EAAA,GAUnB;EAED,OAAO;IAAEd,SAAS,EAATA;EAAU,CAAC;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}