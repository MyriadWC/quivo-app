{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Toby Usher\\\\Documents\\\\dev\\\\quivo-app\\\\frontend\\\\screens\\\\LearnScreen\\\\components\\\\Word.tsx\",\n  _this = this;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport { useState, useEffect, useRef, useContext } from \"react\";\nimport { transliterate } from 'transliteration';\nimport { Audio } from 'expo-av';\nimport UserContext from \"../../../contexts/UserContext\";\nimport * as constants from \"../../../constants\";\nimport client from \"../../../utils/axios\";\nimport { speak } from \"../../../utils/text\";\nimport { capitalizeFirstLetter } from \"../../../utils/text\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar FrequencyBar = function FrequencyBar(_ref) {\n  var frequency_rank = _ref.frequency_rank;\n  var value = frequency_rank < 5000 ? Math.ceil(frequency_rank / 1000) : 5;\n  var labels = ['Very Common', 'Common', 'Less Common', 'Rare', 'Very Rare'];\n  var colors = ['#008000', '#ADFF2F', '#FFFF00O', '#FFA500', '#FF0000'];\n  return _jsxDEV(View, {\n    style: styles.frequencyBarContainer,\n    children: [_jsxDEV(View, {\n      style: _objectSpread({\n        backgroundColor: colors[value - 1]\n      }, styles.frequencyBar)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, _this), _jsxDEV(Text, {\n      style: styles.frequencyBarText,\n      children: labels[value - 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, _this);\n};\nexport default function Word(_ref2) {\n  var navigation = _ref2.navigation,\n    primaryColor = _ref2.primaryColor,\n    word = _ref2.word,\n    wordData = _ref2.wordData,\n    textColor = _ref2.textColor,\n    onPress = _ref2.onPress,\n    isFirstWord = _ref2.isFirstWord,\n    screenWidth = _ref2.screenWidth,\n    index = _ref2.index,\n    key = _ref2.key;\n  var _useContext = useContext(UserContext),\n    currentUser = _useContext.currentUser,\n    currentLanguageCode = _useContext.currentLanguageCode,\n    setKnownWords = _useContext.setKnownWords,\n    dailyWordCount = _useContext.dailyWordCount,\n    setDailyWordCount = _useContext.setDailyWordCount,\n    streakLimitReached = _useContext.streakLimitReached;\n  var wordRef = useRef(null);\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    lastPress = _useState2[0],\n    setLastPress = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    wordTranslationVisible = _useState4[0],\n    setWordTranslationVisible = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    pressedOnce = _useState6[0],\n    _setPressedOnce = _useState6[1];\n  var _useState7 = useState(),\n    _useState8 = _slicedToArray(_useState7, 2),\n    correctSound = _useState8[0],\n    setCorrectSound = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    wordWidth = _useState10[0],\n    setWordWidth = _useState10[1];\n  var _useState11 = useState(0),\n    _useState12 = _slicedToArray(_useState11, 2),\n    infoBoxXAdjust = _useState12[0],\n    setInfoBoxXAdjust = _useState12[1];\n  var infoBoxWidth = 300;\n  var pressedOnceRef = useRef(pressedOnce);\n  var setPressedOnce = function setPressedOnce(value) {\n    pressedOnceRef.current = value;\n    _setPressedOnce(value);\n  };\n  useEffect(function () {\n    return correctSound ? function () {\n      correctSound.unloadAsync();\n    } : undefined;\n  }, [correctSound]);\n  var calculateXPositionAdjust = function calculateXPositionAdjust(_ref3) {\n    var wordXCentroid = _ref3.wordXCentroid,\n      margin = _ref3.margin;\n    var halfInfoBoxWidth = infoBoxWidth / 2;\n    if (wordXCentroid + halfInfoBoxWidth + margin > screenWidth) {\n      return -(wordXCentroid + halfInfoBoxWidth - screenWidth) - margin;\n    } else if (wordXCentroid - halfInfoBoxWidth - margin < 0) {\n      return -(wordXCentroid - halfInfoBoxWidth) + margin;\n    }\n    return 0;\n  };\n  function playCorrectSound() {\n    return _playCorrectSound.apply(this, arguments);\n  }\n  function _playCorrectSound() {\n    _playCorrectSound = _asyncToGenerator(function* () {\n      var _yield$Audio$Sound$cr = yield Audio.Sound.createAsync(require('../../../assets/audio/correct.mp3')),\n        sound = _yield$Audio$Sound$cr.sound;\n      setCorrectSound(correctSound);\n      yield sound.playAsync();\n    });\n    return _playCorrectSound.apply(this, arguments);\n  }\n  var tapDelayTimeout;\n  var definitionDisplayTimeout;\n  useEffect(function () {\n    var handle = findNodeHandle(wordRef.current);\n    UIManager.measure(handle, function (x, y, w, h, pageX, pageY) {\n      var wordXCentroid = pageX + w / 2;\n      setWordWidth(w);\n      setInfoBoxXAdjust(calculateXPositionAdjust({\n        wordXCentroid: wordXCentroid,\n        margin: 10\n      }));\n    });\n  }, []);\n  var handlePress = function handlePress() {\n    var currentTime = new Date().getTime();\n    if (currentTime - lastPress < constants.DOUBLETAPDELAY) {\n      if (dailyWordCount < constants.MAXDAILYWORDS) {\n        onPress(word);\n        playCorrectSound();\n        client.post('api/users/' + currentUser.user_id + '/toggleknownword/' + wordData.word).then(function (res) {\n          if (res.data.word_added) {\n            setKnownWords(function (prevKnownWords) {\n              return prevKnownWords + 1;\n            });\n            setDailyWordCount(function (prevDailyWordCount) {\n              return prevDailyWordCount + 1;\n            });\n          } else {\n            setKnownWords(function (prevKnownWords) {\n              return prevKnownWords - 1;\n            });\n            setDailyWordCount(function (prevDailyWordCount) {\n              return prevDailyWordCount - 1;\n            });\n          }\n        }).catch(function (e) {\n          console.log(e.response.data);\n        });\n      } else {\n        navigation.navigate('MaxWordsReached');\n      }\n      setLastPress(0);\n      setPressedOnce(false);\n      setWordTranslationVisible(false);\n      clearTimeout(tapDelayTimeout);\n      clearTimeout(definitionDisplayTimeout);\n    } else {\n      setPressedOnce(true);\n      speak(wordData.word, currentLanguageCode);\n      tapDelayTimeout = setTimeout(function () {\n        if (pressedOnceRef.current) {\n          setWordTranslationVisible(true);\n        }\n        ;\n        setPressedOnce(false);\n      }, constants.DOUBLETAPDELAY);\n      definitionDisplayTimeout = setTimeout(function () {\n        setWordTranslationVisible(false);\n      }, constants.TRANSLATIONDISPLAYTIME);\n    }\n    setLastPress(currentTime);\n  };\n  return _jsxDEV(View, {\n    children: [wordTranslationVisible && _jsxDEV(_Fragment, {\n      children: _jsxDEV(View, {\n        style: _objectSpread({\n          width: infoBoxWidth,\n          marginLeft: (wordWidth - infoBoxWidth) / 2 + infoBoxXAdjust,\n          backgroundColor: primaryColor\n        }, styles.infoBox),\n        children: [_jsxDEV(View, {\n          style: styles.translationContainer,\n          children: [_jsxDEV(View, {\n            style: styles.targetLanguageContainer,\n            children: [['ru'].includes(currentLanguageCode) && _jsxDEV(Text, {\n              style: styles.transliterationText,\n              children: capitalizeFirstLetter(transliterate(wordData.word))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 33\n            }, this), _jsxDEV(Text, {\n              style: _objectSpread({}, styles.translationText),\n              children: [capitalizeFirstLetter(wordData.word), \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this), _jsxDEV(Text, {\n            style: styles.translationText,\n            children: wordData.translation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }, this), _jsxDEV(View, {\n          style: styles.additionalDataContainer,\n          children: _jsxDEV(FrequencyBar, {\n            frequency_rank: wordData.rank\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this)\n    }, void 0, false), _jsxDEV(TouchableOpacity, {\n      activeOpacity: 1,\n      onPress: function onPress() {\n        return handlePress();\n      },\n      children: _jsxDEV(Text, {\n        style: _objectSpread(_objectSpread({}, styles.mainText), {}, {\n          color: textColor,\n          textDecorationLine: wordTranslationVisible ? 'underline' : 'none'\n        }),\n        ref: wordRef,\n        children: isFirstWord ? capitalizeFirstLetter(word) : word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 9\n  }, this);\n}\nvar styles = StyleSheet.create({\n  frequencyBarContainer: {\n    flexDirection: 'row'\n  },\n  frequencyBar: {\n    borderRadius: 5,\n    padding: 5,\n    marginRight: 5,\n    width: 20,\n    height: 20,\n    borderWidth: 2,\n    borderColor: constants.TERTIARYCOLOR\n  },\n  frequencyBarText: {\n    fontFamily: constants.FONTFAMILYBOLD,\n    color: constants.TERTIARYCOLOR,\n    fontSize: constants.CONTENTFONTSIZE\n  },\n  mainText: {\n    fontSize: constants.H1FONTSIZE + 7,\n    fontFamily: constants.FONTFAMILYBOLD\n  },\n  infoBox: {\n    height: 80,\n    borderRadius: 20,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'absolute',\n    zIndex: 1,\n    top: -80\n  },\n  translationContainer: {\n    flexDirection: 'row'\n  },\n  translationText: {\n    fontSize: constants.H1FONTSIZE - 10,\n    fontFamily: constants.FONTFAMILYBOLD,\n    color: constants.TERTIARYCOLOR,\n    marginTop: 'auto',\n    marginBottom: 5,\n    marginRight: 10\n  },\n  targetLanguageContainer: {\n    flexDirection: 'column'\n  },\n  additionalDataContainer: {\n    flexDirection: 'row',\n    marginBottom: 10\n  },\n  transliterationText: {\n    fontFamily: constants.FONTFAMILY,\n    color: constants.LIGHTGREY,\n    fontSize: constants.CONTENTFONTSIZE,\n    marginRight: 'auto'\n  },\n  frequencyScoreText: {\n    fontSize: constants.H2FONTSIZE,\n    fontFamily: constants.FONTFAMILY,\n    color: constants.TERTIARYCOLOR\n  }\n});","map":{"version":3,"names":["useState","useEffect","useRef","useContext","transliterate","Audio","UserContext","constants","client","speak","capitalizeFirstLetter","jsxDEV","_jsxDEV","Fragment","_Fragment","FrequencyBar","_ref","frequency_rank","value","Math","ceil","labels","colors","View","style","styles","frequencyBarContainer","children","_objectSpread","backgroundColor","frequencyBar","fileName","_jsxFileName","lineNumber","columnNumber","_this","Text","frequencyBarText","Word","_ref2","navigation","primaryColor","word","wordData","textColor","onPress","isFirstWord","screenWidth","index","key","_useContext","currentUser","currentLanguageCode","setKnownWords","dailyWordCount","setDailyWordCount","streakLimitReached","wordRef","_useState","_useState2","_slicedToArray","lastPress","setLastPress","_useState3","_useState4","wordTranslationVisible","setWordTranslationVisible","_useState5","_useState6","pressedOnce","_setPressedOnce","_useState7","_useState8","correctSound","setCorrectSound","_useState9","_useState10","wordWidth","setWordWidth","_useState11","_useState12","infoBoxXAdjust","setInfoBoxXAdjust","infoBoxWidth","pressedOnceRef","setPressedOnce","current","unloadAsync","undefined","calculateXPositionAdjust","_ref3","wordXCentroid","margin","halfInfoBoxWidth","playCorrectSound","_playCorrectSound","apply","arguments","_asyncToGenerator","_yield$Audio$Sound$cr","Sound","createAsync","require","sound","playAsync","tapDelayTimeout","definitionDisplayTimeout","handle","findNodeHandle","UIManager","measure","x","y","w","h","pageX","pageY","handlePress","currentTime","Date","getTime","DOUBLETAPDELAY","MAXDAILYWORDS","post","user_id","then","res","data","word_added","prevKnownWords","prevDailyWordCount","catch","e","console","log","response","navigate","clearTimeout","setTimeout","TRANSLATIONDISPLAYTIME","width","marginLeft","infoBox","translationContainer","targetLanguageContainer","includes","transliterationText","translationText","translation","additionalDataContainer","rank","TouchableOpacity","activeOpacity","mainText","color","textDecorationLine","ref","StyleSheet","create","flexDirection","borderRadius","padding","marginRight","height","borderWidth","borderColor","TERTIARYCOLOR","fontFamily","FONTFAMILYBOLD","fontSize","CONTENTFONTSIZE","H1FONTSIZE","justifyContent","alignItems","position","zIndex","top","marginTop","marginBottom","FONTFAMILY","LIGHTGREY","frequencyScoreText","H2FONTSIZE"],"sources":["C:/Users/Toby Usher/Documents/dev/quivo-app/frontend/screens/LearnScreen/components/Word.tsx"],"sourcesContent":["import { StyleSheet, View, SafeAreaView, Text, TouchableOpacity, findNodeHandle, UIManager } from \"react-native\";\r\nimport { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\r\nimport { transliterate } from 'transliteration';\r\n//import Sound from 'react-native-sound';\r\nimport { Audio } from 'expo-av';\r\n\r\n// Contexts\r\nimport UserContext from \"../../../contexts/UserContext\";\r\n// Constants\r\nimport * as constants from \"../../../constants\";\r\n// Utils\r\nimport client from \"../../../utils/axios\";\r\nimport { speak } from \"../../../utils/text\";\r\nimport { capitalizeFirstLetter } from \"../../../utils/text\";\r\n\r\ninterface IFrequencyBar {\r\n    frequency_rank: number\r\n}\r\n\r\nconst FrequencyBar = ({ frequency_rank }: IFrequencyBar) => {\r\n    \r\n    // Assign frequency score between 1 and 5\r\n    let value = frequency_rank < 5000 ? Math.ceil(frequency_rank/1000) : 5;\r\n    let labels = ['Very Common', 'Common', 'Less Common', 'Rare', 'Very Rare'];\r\n    let colors = ['#008000', '#ADFF2F', '#FFFF00O', '#FFA500', '#FF0000'];\r\n\r\n    return (\r\n        <View style={styles.frequencyBarContainer}>\r\n            <View style={{\r\n                backgroundColor: colors[value - 1],\r\n                ...styles.frequencyBar\r\n                }}>\r\n            </View>\r\n            <Text style={styles.frequencyBarText}>{labels[value - 1]}</Text>\r\n        </View>\r\n    );\r\n}\r\n\r\n// TODO: This should be moved to an interface folder and imported\r\ninterface IWordData {\r\n    id: number,\r\n    rank: number,\r\n    word: string,\r\n    frequency: number,\r\n    user_knows: boolean\r\n}\r\n\r\ninterface IWordProps {\r\n    navigation: any,\r\n    primaryColor: string,\r\n    word: string,\r\n    wordData: IWordData,\r\n    textColor: string,\r\n    onPress: Function,\r\n    isFirstWord: boolean,\r\n    screenWidth: number,\r\n    index: number,\r\n    key: string\r\n}\r\n\r\nexport default function Word ({navigation, primaryColor, word, wordData, textColor, onPress, isFirstWord, screenWidth, index, key}: IWordProps) {\r\n\r\n    const { currentUser, currentLanguageCode, setKnownWords, dailyWordCount, setDailyWordCount, streakLimitReached } = useContext(UserContext);\r\n\r\n    const wordRef = useRef(null);\r\n    //const [textColor, setTextColor] = useState(wordData.user_knows ? constants.PRIMARYCOLOR : constants.BLACK);\r\n    // Temps écoulé depuis la dérnière fois qu'on a tapé sur le mot. Initialiser à 0 millisecondes\r\n    const [lastPress, setLastPress] = useState(0);\r\n    const [wordTranslationVisible, setWordTranslationVisible] = useState(false);\r\n    const [pressedOnce, _setPressedOnce] = useState(false);\r\n    const [correctSound, setCorrectSound] = useState();\r\n    const [wordWidth, setWordWidth] = useState(0);\r\n    const [infoBoxXAdjust,  setInfoBoxXAdjust] = useState(0);\r\n\r\n    let infoBoxWidth = 300;\r\n\r\n    // This is super messy but it's the only way I could find to achieve this behaviour\r\n    const pressedOnceRef = useRef(pressedOnce);\r\n\r\n    const setPressedOnce = (value: boolean) => {\r\n      pressedOnceRef.current = value;\r\n      _setPressedOnce(value);\r\n    };\r\n\r\n    // TODO: Make correctSound into custom hook\r\n    useEffect(() => {\r\n        return correctSound\r\n          ? () => {\r\n                // Unload sound\r\n                correctSound.unloadAsync();\r\n            }\r\n          : undefined;\r\n      }, [correctSound]);\r\n\r\n    interface ICalculateXPositionAdjust {\r\n        wordXCentroid: number,\r\n        margin: number\r\n    }\r\n\r\n    const calculateXPositionAdjust = ({ wordXCentroid, margin }: ICalculateXPositionAdjust) => {\r\n        //Amount X coordinate of info box should be adjusted to ensure it stays on the screen\r\n\r\n        const halfInfoBoxWidth = infoBoxWidth / 2;\r\n\r\n        if (wordXCentroid + halfInfoBoxWidth + margin > screenWidth) {\r\n            return -((wordXCentroid + halfInfoBoxWidth) - screenWidth) - margin;\r\n\r\n        } else if (wordXCentroid - halfInfoBoxWidth - margin < 0) {\r\n            return -(wordXCentroid - halfInfoBoxWidth) + margin;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    async function playCorrectSound() {\r\n        // Load sound\r\n        const { sound } = await Audio.Sound.createAsync( require('../../../assets/audio/correct.mp3')\r\n        );\r\n        setCorrectSound(correctSound);\r\n        await sound.playAsync();\r\n    }\r\n\r\n    // setTimeout rend un identifiant numérique unique\r\n    let tapDelayTimeout: TimeOut;\r\n    let definitionDisplayTimeout: TimeOut;\r\n\r\n    useEffect(() => {\r\n        const handle = findNodeHandle(wordRef.current);\r\n        UIManager.measure(handle, (x, y, w, h, pageX, pageY) => {\r\n            const wordXCentroid = pageX + (w / 2);\r\n            setWordWidth(w);\r\n            setInfoBoxXAdjust(\r\n                calculateXPositionAdjust({\r\n                    wordXCentroid:wordXCentroid,\r\n                    margin: 10 \r\n                })\r\n            );\r\n        });\r\n    }, []);\r\n  \r\n    const handlePress = () => {\r\n\r\n        const currentTime = new Date().getTime();\r\n\r\n        // L'utilisateur a tapé deux fois\r\n        if (currentTime - lastPress < constants.DOUBLETAPDELAY) {\r\n            if (dailyWordCount < constants.MAXDAILYWORDS) {\r\n                // Basculer entre deux couleurs selon si le mot a déjà été ajouté au dictionnaire\r\n                //setTextColor(\r\n                //    textColor === constants.BLACK\r\n                //    ? constants.PRIMARYCOLOR\r\n                //    : constants.BLACK\r\n                //);\r\n                onPress(word);\r\n                playCorrectSound();\r\n\r\n                client.post(\r\n                    'api/users/' + currentUser.user_id + '/toggleknownword/' + wordData.word\r\n                ).then(function(res) {\r\n                    // Update local word count record accordingly\r\n                    if (res.data.word_added) {\r\n                        // I need a function that does all this together\r\n                        setKnownWords(prevKnownWords => prevKnownWords + 1)\r\n                        setDailyWordCount(prevDailyWordCount => prevDailyWordCount + 1)\r\n                    } else {\r\n                        setKnownWords(prevKnownWords => prevKnownWords - 1)\r\n                        setDailyWordCount(prevDailyWordCount => prevDailyWordCount - 1)\r\n                    }\r\n                }).catch(function(e) {\r\n                    console.log(e.response.data)\r\n                });\r\n            } else {\r\n                navigation.navigate('MaxWordsReached');\r\n            }\r\n\r\n            setLastPress(0);\r\n            setPressedOnce(false);\r\n            setWordTranslationVisible(false);\r\n\r\n            // Supprimer les timeOut q'on a initialisés lors de la première tape pour ne\r\n            // plus afficher la traduction\r\n            clearTimeout(tapDelayTimeout);\r\n            clearTimeout(definitionDisplayTimeout);\r\n\r\n        } else { // C'est la première fois que l'utilisateur tape le mot\r\n\r\n            // Le timeOut attend la fin de la fenêtre où l'utilisateur pourrait taper une deuxième fois\r\n            // avant d'fficher la traduction pendant la période choisie.\r\n            setPressedOnce(true);\r\n\r\n            // WordData.word contains the full word\r\n            speak(wordData.word, currentLanguageCode);\r\n            \r\n            tapDelayTimeout = setTimeout(() => {\r\n\r\n                // Si l'utilisateur a tape deux fois le timeout lastPress sera remis a zero au moment que\r\n                // ce timeout va s'activer, et pressedOnce sera faux. Dans ce cas, on ne veut plus afficher\r\n                // la traduction\r\n                if (pressedOnceRef.current) {\r\n                    setWordTranslationVisible(true);\r\n                };\r\n\r\n                setPressedOnce(false);\r\n\r\n            }, constants.DOUBLETAPDELAY);\r\n\r\n            definitionDisplayTimeout = setTimeout(() => {\r\n                setWordTranslationVisible(false);\r\n            }, constants.TRANSLATIONDISPLAYTIME);\r\n\r\n        }\r\n\r\n        setLastPress(currentTime);\r\n\r\n    }\r\n    return (\r\n        <View>\r\n            {wordTranslationVisible && (<>\r\n                <View style={{\r\n                    width: infoBoxWidth,\r\n                    marginLeft: (wordWidth-infoBoxWidth)/2 + infoBoxXAdjust,\r\n                    backgroundColor: primaryColor,\r\n                    ...styles.infoBox\r\n                    }}>\r\n                    <View style={styles.translationContainer}>\r\n                        <View style={styles.targetLanguageContainer}>\r\n                            {['ru'].includes(currentLanguageCode) &&\r\n                                <Text style={styles.transliterationText}>{capitalizeFirstLetter(transliterate(wordData.word))}</Text>\r\n                            }\r\n                            <Text style={{\r\n                                ...styles.translationText\r\n                                }}>\r\n                                {capitalizeFirstLetter(wordData.word)}:\r\n                            </Text>\r\n                        </View>\r\n                    <Text style={styles.translationText}>{wordData.translation}</Text>\r\n                    </View>\r\n                    <View style={styles.additionalDataContainer}>\r\n                        <FrequencyBar frequency_rank={wordData.rank} />\r\n                    </View>\r\n                </View>\r\n            </>)}\r\n            <TouchableOpacity\r\n                activeOpacity={1}\r\n                key={index}\r\n                onPress={() => handlePress()}\r\n                >\r\n                <Text\r\n                    style={{\r\n                        ...styles.mainText,\r\n                        color: textColor,\r\n                        textDecorationLine: wordTranslationVisible ? 'underline': 'none'\r\n                    }}\r\n                    ref={wordRef}\r\n                    >\r\n                    {isFirstWord ? capitalizeFirstLetter(word) : word}\r\n                </Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n}\r\n\r\n  const styles= StyleSheet.create({\r\n\r\n    // FrequencyBar\r\n    frequencyBarContainer: {\r\n        flexDirection: 'row'\r\n    },\r\n    frequencyBar: {\r\n        borderRadius: 5,\r\n        padding: 5,\r\n        marginRight: 5,\r\n        width: 20,\r\n        height: 20,\r\n        borderWidth: 2,\r\n        borderColor: constants.TERTIARYCOLOR\r\n    },\r\n    frequencyBarText: {\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        color: constants.TERTIARYCOLOR,\r\n        fontSize: constants.CONTENTFONTSIZE\r\n    },\r\n    \r\n    // Word\r\n    mainText: {\r\n        fontSize: constants.H1FONTSIZE + 7,\r\n        fontFamily: constants.FONTFAMILYBOLD\r\n    },\r\n    infoBox: {\r\n        height: 80,\r\n        borderRadius: 20,\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        top: -80\r\n    },\r\n    translationContainer: {\r\n        flexDirection: 'row',\r\n    },\r\n    translationText: {\r\n        fontSize: constants.H1FONTSIZE - 10,\r\n        fontFamily: constants.FONTFAMILYBOLD,\r\n        color: constants.TERTIARYCOLOR,\r\n        marginTop: 'auto',\r\n        marginBottom: 5,\r\n        marginRight: 10\r\n    },\r\n    targetLanguageContainer: {\r\n        flexDirection: 'column'\r\n    },\r\n    additionalDataContainer: {\r\n        flexDirection: 'row',\r\n        marginBottom: 10\r\n    },\r\n    transliterationText: {\r\n        fontFamily: constants.FONTFAMILY,\r\n        color: constants.LIGHTGREY,\r\n        fontSize: constants.CONTENTFONTSIZE,\r\n        marginRight: 'auto'\r\n    },\r\n    frequencyScoreText: {\r\n        fontSize: constants.H2FONTSIZE,\r\n        fontFamily: constants.FONTFAMILY,\r\n        color: constants.TERTIARYCOLOR\r\n    }\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}